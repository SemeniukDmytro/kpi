//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JavaScriptParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;
using BLL;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class JavaScriptParser : JavaScriptParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		HashBangLine=1, MultiLineComment=2, SingleLineComment=3, RegularExpressionLiteral=4, 
		OpenBracket=5, CloseBracket=6, OpenParen=7, CloseParen=8, OpenBrace=9, 
		TemplateCloseBrace=10, CloseBrace=11, SemiColon=12, Comma=13, Assign=14, 
		QuestionMark=15, QuestionMarkDot=16, Colon=17, Ellipsis=18, Dot=19, PlusPlus=20, 
		MinusMinus=21, Plus=22, Minus=23, BitNot=24, Not=25, Multiply=26, Divide=27, 
		Modulus=28, Power=29, NullCoalesce=30, Hashtag=31, RightShiftArithmetic=32, 
		LeftShiftArithmetic=33, RightShiftLogical=34, LessThan=35, MoreThan=36, 
		LessThanEquals=37, GreaterThanEquals=38, Equals_=39, NotEquals=40, IdentityEquals=41, 
		IdentityNotEquals=42, BitAnd=43, BitXOr=44, BitOr=45, And=46, Or=47, MultiplyAssign=48, 
		DivideAssign=49, ModulusAssign=50, PlusAssign=51, MinusAssign=52, LeftShiftArithmeticAssign=53, 
		RightShiftArithmeticAssign=54, RightShiftLogicalAssign=55, BitAndAssign=56, 
		BitXorAssign=57, BitOrAssign=58, PowerAssign=59, NullishCoalescingAssign=60, 
		ARROW=61, NullLiteral=62, BooleanLiteral=63, DecimalLiteral=64, HexIntegerLiteral=65, 
		OctalIntegerLiteral=66, OctalIntegerLiteral2=67, BinaryIntegerLiteral=68, 
		BigHexIntegerLiteral=69, BigOctalIntegerLiteral=70, BigBinaryIntegerLiteral=71, 
		BigDecimalIntegerLiteral=72, Break=73, Do=74, Instanceof=75, Typeof=76, 
		Case=77, Else=78, New=79, Var=80, Catch=81, Finally=82, Return=83, Void=84, 
		Continue=85, For=86, Switch=87, While=88, Debugger=89, Function_=90, This=91, 
		With=92, Default=93, If=94, Throw=95, Delete=96, In=97, Try=98, As=99, 
		From=100, Of=101, Yield=102, YieldStar=103, Class=104, Enum=105, Extends=106, 
		Super=107, Const=108, Export=109, Import=110, Async=111, Await=112, Implements=113, 
		StrictLet=114, NonStrictLet=115, Private=116, Public=117, Interface=118, 
		Package=119, Protected=120, Static=121, Identifier=122, StringLiteral=123, 
		BackTick=124, WhiteSpaces=125, LineTerminator=126, HtmlComment=127, CDataComment=128, 
		UnexpectedCharacter=129, TemplateStringStartExpression=130, TemplateStringAtom=131;
	public const int
		RULE_program = 0, RULE_sourceElement = 1, RULE_statement = 2, RULE_block = 3, 
		RULE_statementList = 4, RULE_importStatement = 5, RULE_importFromBlock = 6, 
		RULE_importModuleItems = 7, RULE_importAliasName = 8, RULE_moduleExportName = 9, 
		RULE_importedBinding = 10, RULE_importDefault = 11, RULE_importNamespace = 12, 
		RULE_importFrom = 13, RULE_aliasName = 14, RULE_exportStatement = 15, 
		RULE_exportFromBlock = 16, RULE_exportModuleItems = 17, RULE_exportAliasName = 18, 
		RULE_declaration = 19, RULE_variableStatement = 20, RULE_variableDeclarationList = 21, 
		RULE_variableDeclaration = 22, RULE_emptyStatement_ = 23, RULE_expressionStatement = 24, 
		RULE_ifStatement = 25, RULE_iterationStatement = 26, RULE_varModifier = 27, 
		RULE_continueStatement = 28, RULE_breakStatement = 29, RULE_returnStatement = 30, 
		RULE_yieldStatement = 31, RULE_withStatement = 32, RULE_switchStatement = 33, 
		RULE_caseBlock = 34, RULE_caseClauses = 35, RULE_caseClause = 36, RULE_defaultClause = 37, 
		RULE_labelledStatement = 38, RULE_throwStatement = 39, RULE_tryStatement = 40, 
		RULE_catchProduction = 41, RULE_finallyProduction = 42, RULE_debuggerStatement = 43, 
		RULE_functionDeclaration = 44, RULE_classDeclaration = 45, RULE_classTail = 46, 
		RULE_classElement = 47, RULE_methodDefinition = 48, RULE_fieldDefinition = 49, 
		RULE_classElementName = 50, RULE_privateIdentifier = 51, RULE_formalParameterList = 52, 
		RULE_formalParameterArg = 53, RULE_lastFormalParameterArg = 54, RULE_functionBody = 55, 
		RULE_sourceElements = 56, RULE_arrayLiteral = 57, RULE_elementList = 58, 
		RULE_arrayElement = 59, RULE_propertyAssignment = 60, RULE_propertyName = 61, 
		RULE_arguments = 62, RULE_argument = 63, RULE_expressionSequence = 64, 
		RULE_singleExpression = 65, RULE_initializer = 66, RULE_assignable = 67, 
		RULE_objectLiteral = 68, RULE_anonymousFunction = 69, RULE_arrowFunctionParameters = 70, 
		RULE_arrowFunctionBody = 71, RULE_assignmentOperator = 72, RULE_literal = 73, 
		RULE_templateStringLiteral = 74, RULE_templateStringAtom = 75, RULE_numericLiteral = 76, 
		RULE_bigintLiteral = 77, RULE_getter = 78, RULE_setter = 79, RULE_identifierName = 80, 
		RULE_identifier = 81, RULE_reservedWord = 82, RULE_keyword = 83, RULE_let_ = 84, 
		RULE_eos = 85;
	public static readonly string[] ruleNames = {
		"program", "sourceElement", "statement", "block", "statementList", "importStatement", 
		"importFromBlock", "importModuleItems", "importAliasName", "moduleExportName", 
		"importedBinding", "importDefault", "importNamespace", "importFrom", "aliasName", 
		"exportStatement", "exportFromBlock", "exportModuleItems", "exportAliasName", 
		"declaration", "variableStatement", "variableDeclarationList", "variableDeclaration", 
		"emptyStatement_", "expressionStatement", "ifStatement", "iterationStatement", 
		"varModifier", "continueStatement", "breakStatement", "returnStatement", 
		"yieldStatement", "withStatement", "switchStatement", "caseBlock", "caseClauses", 
		"caseClause", "defaultClause", "labelledStatement", "throwStatement", 
		"tryStatement", "catchProduction", "finallyProduction", "debuggerStatement", 
		"functionDeclaration", "classDeclaration", "classTail", "classElement", 
		"methodDefinition", "fieldDefinition", "classElementName", "privateIdentifier", 
		"formalParameterList", "formalParameterArg", "lastFormalParameterArg", 
		"functionBody", "sourceElements", "arrayLiteral", "elementList", "arrayElement", 
		"propertyAssignment", "propertyName", "arguments", "argument", "expressionSequence", 
		"singleExpression", "initializer", "assignable", "objectLiteral", "anonymousFunction", 
		"arrowFunctionParameters", "arrowFunctionBody", "assignmentOperator", 
		"literal", "templateStringLiteral", "templateStringAtom", "numericLiteral", 
		"bigintLiteral", "getter", "setter", "identifierName", "identifier", "reservedWord", 
		"keyword", "let_", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'['", "']'", "'('", "')'", "'{'", null, 
		"'}'", "';'", "','", "'='", "'?'", "'?.'", "':'", "'...'", "'.'", "'++'", 
		"'--'", "'+'", "'-'", "'~'", "'!'", "'*'", "'/'", "'%'", "'**'", "'??'", 
		"'#'", "'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", "'>='", "'=='", 
		"'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'*='", 
		"'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", "'&='", "'^='", 
		"'|='", "'**='", "'??='", "'=>'", "'null'", null, null, null, null, null, 
		null, null, null, null, null, "'break'", "'do'", "'instanceof'", "'typeof'", 
		"'case'", "'else'", "'new'", "'var'", "'catch'", "'finally'", "'return'", 
		"'void'", "'continue'", "'for'", "'switch'", "'while'", "'debugger'", 
		"'function'", "'this'", "'with'", "'default'", "'if'", "'throw'", "'delete'", 
		"'in'", "'try'", "'as'", "'from'", "'of'", "'yield'", "'yield*'", "'class'", 
		"'enum'", "'extends'", "'super'", "'const'", "'export'", "'import'", "'async'", 
		"'await'", "'implements'", null, null, "'private'", "'public'", "'interface'", 
		"'package'", "'protected'", "'static'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HashBangLine", "MultiLineComment", "SingleLineComment", "RegularExpressionLiteral", 
		"OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"TemplateCloseBrace", "CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", 
		"QuestionMarkDot", "Colon", "Ellipsis", "Dot", "PlusPlus", "MinusMinus", 
		"Plus", "Minus", "BitNot", "Not", "Multiply", "Divide", "Modulus", "Power", 
		"NullCoalesce", "Hashtag", "RightShiftArithmetic", "LeftShiftArithmetic", 
		"RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", 
		"Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", "BitAnd", 
		"BitXOr", "BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", 
		"PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
		"RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", 
		"PowerAssign", "NullishCoalescingAssign", "ARROW", "NullLiteral", "BooleanLiteral", 
		"DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", 
		"BinaryIntegerLiteral", "BigHexIntegerLiteral", "BigOctalIntegerLiteral", 
		"BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", "Break", "Do", 
		"Instanceof", "Typeof", "Case", "Else", "New", "Var", "Catch", "Finally", 
		"Return", "Void", "Continue", "For", "Switch", "While", "Debugger", "Function_", 
		"This", "With", "Default", "If", "Throw", "Delete", "In", "Try", "As", 
		"From", "Of", "Yield", "YieldStar", "Class", "Enum", "Extends", "Super", 
		"Const", "Export", "Import", "Async", "Await", "Implements", "StrictLet", 
		"NonStrictLet", "Private", "Public", "Interface", "Package", "Protected", 
		"Static", "Identifier", "StringLiteral", "BackTick", "WhiteSpaces", "LineTerminator", 
		"HtmlComment", "CDataComment", "UnexpectedCharacter", "TemplateStringStartExpression", 
		"TemplateStringAtom"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JavaScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static JavaScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JavaScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JavaScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(JavaScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HashBangLine() { return GetToken(JavaScriptParser.HashBangLine, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 172;
				Match(HashBangLine);
				}
				break;
			}
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 175;
				sourceElements();
				}
				break;
			}
			State = 178;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SourceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSourceElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSourceElement(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementContext sourceElement() {
		SourceElementContext _localctx = new SourceElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_sourceElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportStatementContext exportStatement() {
			return GetRuleContext<ExportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context emptyStatement_() {
			return GetRuleContext<EmptyStatement_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithStatementContext withStatement() {
			return GetRuleContext<WithStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelledStatementContext labelledStatement() {
			return GetRuleContext<LabelledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DebuggerStatementContext debuggerStatement() {
			return GetRuleContext<DebuggerStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183;
				variableStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 184;
				importStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 185;
				exportStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 186;
				emptyStatement_();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 187;
				classDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 188;
				functionDeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 189;
				expressionStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 190;
				ifStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 191;
				iterationStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 192;
				continueStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 193;
				breakStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 194;
				returnStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 195;
				yieldStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 196;
				withStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 197;
				labelledStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 198;
				switchStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 199;
				throwStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 200;
				tryStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 201;
				debuggerStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(OpenBrace);
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 205;
				statementList();
				}
				break;
			}
			State = 208;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 8, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 210;
					statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 213;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(JavaScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromBlockContext importFromBlock() {
			return GetRuleContext<ImportFromBlockContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(Import);
			State = 216;
			importFromBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportModuleItemsContext importModuleItems() {
			return GetRuleContext<ImportModuleItemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDefaultContext importDefault() {
			return GetRuleContext<ImportDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		public ImportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportFromBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportFromBlock(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromBlockContext importFromBlock() {
		ImportFromBlockContext _localctx = new ImportFromBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_importFromBlock);
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
			case Multiply:
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Of:
			case Yield:
			case YieldStar:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 219;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 218;
					importDefault();
					}
					break;
				}
				State = 223;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Multiply:
				case NullLiteral:
				case BooleanLiteral:
				case Break:
				case Do:
				case Instanceof:
				case Typeof:
				case Case:
				case Else:
				case New:
				case Var:
				case Catch:
				case Finally:
				case Return:
				case Void:
				case Continue:
				case For:
				case Switch:
				case While:
				case Debugger:
				case Function_:
				case This:
				case With:
				case Default:
				case If:
				case Throw:
				case Delete:
				case In:
				case Try:
				case As:
				case From:
				case Of:
				case Yield:
				case YieldStar:
				case Class:
				case Enum:
				case Extends:
				case Super:
				case Const:
				case Export:
				case Import:
				case Async:
				case Await:
				case Implements:
				case StrictLet:
				case NonStrictLet:
				case Private:
				case Public:
				case Interface:
				case Package:
				case Protected:
				case Static:
				case Identifier:
					{
					State = 221;
					importNamespace();
					}
					break;
				case OpenBrace:
					{
					State = 222;
					importModuleItems();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 225;
				importFrom();
				State = 226;
				eos();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228;
				Match(StringLiteral);
				State = 229;
				eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportModuleItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasNameContext[] importAliasName() {
			return GetRuleContexts<ImportAliasNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasNameContext importAliasName(int i) {
			return GetRuleContext<ImportAliasNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ImportModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importModuleItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportModuleItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportModuleItems(this);
		}
	}

	[RuleVersion(0)]
	public ImportModuleItemsContext importModuleItems() {
		ImportModuleItemsContext _localctx = new ImportModuleItemsContext(Context, State);
		EnterRule(_localctx, 14, RULE_importModuleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(OpenBrace);
			State = 238;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 233;
					importAliasName();
					State = 234;
					Match(Comma);
					}
					} 
				}
				State = 240;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & 4611686018427385859L) != 0)) {
				{
				State = 241;
				importAliasName();
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 242;
					Match(Comma);
					}
				}

				}
			}

			State = 247;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext moduleExportName() {
			return GetRuleContext<ModuleExportNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportedBindingContext importedBinding() {
			return GetRuleContext<ImportedBindingContext>(0);
		}
		public ImportAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportAliasName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportAliasName(this);
		}
	}

	[RuleVersion(0)]
	public ImportAliasNameContext importAliasName() {
		ImportAliasNameContext _localctx = new ImportAliasNameContext(Context, State);
		EnterRule(_localctx, 16, RULE_importAliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			moduleExportName();
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 250;
				Match(As);
				State = 251;
				importedBinding();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleExportNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		public ModuleExportNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleExportName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterModuleExportName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitModuleExportName(this);
		}
	}

	[RuleVersion(0)]
	public ModuleExportNameContext moduleExportName() {
		ModuleExportNameContext _localctx = new ModuleExportNameContext(Context, State);
		EnterRule(_localctx, 18, RULE_moduleExportName);
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Of:
			case Yield:
			case YieldStar:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 254;
				identifierName();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 255;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportedBindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(JavaScriptParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(JavaScriptParser.Await, 0); }
		public ImportedBindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importedBinding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportedBinding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportedBinding(this);
		}
	}

	[RuleVersion(0)]
	public ImportedBindingContext importedBinding() {
		ImportedBindingContext _localctx = new ImportedBindingContext(Context, State);
		EnterRule(_localctx, 20, RULE_importedBinding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & 1049601L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasNameContext aliasName() {
			return GetRuleContext<AliasNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(JavaScriptParser.Comma, 0); }
		public ImportDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportDefault(this);
		}
	}

	[RuleVersion(0)]
	public ImportDefaultContext importDefault() {
		ImportDefaultContext _localctx = new ImportDefaultContext(Context, State);
		EnterRule(_localctx, 22, RULE_importDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			aliasName();
			State = 261;
			Match(Comma);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportNamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		public ImportNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importNamespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportNamespace(this);
		}
	}

	[RuleVersion(0)]
	public ImportNamespaceContext importNamespace() {
		ImportNamespaceContext _localctx = new ImportNamespaceContext(Context, State);
		EnterRule(_localctx, 24, RULE_importNamespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
				{
				State = 263;
				Match(Multiply);
				}
				break;
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Of:
			case Yield:
			case YieldStar:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Identifier:
				{
				State = 264;
				identifierName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 267;
				Match(As);
				State = 268;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(JavaScriptParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		public ImportFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportFrom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportFrom(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromContext importFrom() {
		ImportFromContext _localctx = new ImportFromContext(Context, State);
		EnterRule(_localctx, 26, RULE_importFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			Match(From);
			State = 272;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		public AliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAliasName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAliasName(this);
		}
	}

	[RuleVersion(0)]
	public AliasNameContext aliasName() {
		AliasNameContext _localctx = new AliasNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_aliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			identifierName();
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 275;
				Match(As);
				State = 276;
				identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportStatementContext : ParserRuleContext {
		public ExportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportStatement; } }
	 
		public ExportStatementContext() { }
		public virtual void CopyFrom(ExportStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExportDefaultDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(JavaScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(JavaScriptParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExportDefaultDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExportDefaultDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExportDefaultDeclaration(this);
		}
	}
	public partial class ExportDeclarationContext : ExportStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(JavaScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportFromBlockContext exportFromBlock() {
			return GetRuleContext<ExportFromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(JavaScriptParser.Default, 0); }
		public ExportDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExportDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ExportStatementContext exportStatement() {
		ExportStatementContext _localctx = new ExportStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_exportStatement);
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new ExportDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 279;
				Match(Export);
				State = 281;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 280;
					Match(Default);
					}
					break;
				}
				State = 285;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 283;
					exportFromBlock();
					}
					break;
				case 2:
					{
					State = 284;
					declaration();
					}
					break;
				}
				State = 287;
				eos();
				}
				break;
			case 2:
				_localctx = new ExportDefaultDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 289;
				Match(Export);
				State = 290;
				Match(Default);
				State = 291;
				singleExpression(0);
				State = 292;
				eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportFromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportModuleItemsContext exportModuleItems() {
			return GetRuleContext<ExportModuleItemsContext>(0);
		}
		public ExportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportFromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExportFromBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExportFromBlock(this);
		}
	}

	[RuleVersion(0)]
	public ExportFromBlockContext exportFromBlock() {
		ExportFromBlockContext _localctx = new ExportFromBlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_exportFromBlock);
		try {
			State = 306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Of:
			case Yield:
			case YieldStar:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296;
				importNamespace();
				State = 297;
				importFrom();
				State = 298;
				eos();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 300;
				exportModuleItems();
				State = 302;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 301;
					importFrom();
					}
					break;
				}
				State = 304;
				eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportModuleItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExportAliasNameContext[] exportAliasName() {
			return GetRuleContexts<ExportAliasNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportAliasNameContext exportAliasName(int i) {
			return GetRuleContext<ExportAliasNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ExportModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportModuleItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExportModuleItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExportModuleItems(this);
		}
	}

	[RuleVersion(0)]
	public ExportModuleItemsContext exportModuleItems() {
		ExportModuleItemsContext _localctx = new ExportModuleItemsContext(Context, State);
		EnterRule(_localctx, 34, RULE_exportModuleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			Match(OpenBrace);
			State = 314;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 309;
					exportAliasName();
					State = 310;
					Match(Comma);
					}
					} 
				}
				State = 316;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & 4611686018427385859L) != 0)) {
				{
				State = 317;
				exportAliasName();
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 318;
					Match(Comma);
					}
				}

				}
			}

			State = 323;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportAliasNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext[] moduleExportName() {
			return GetRuleContexts<ModuleExportNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleExportNameContext moduleExportName(int i) {
			return GetRuleContext<ModuleExportNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		public ExportAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportAliasName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExportAliasName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExportAliasName(this);
		}
	}

	[RuleVersion(0)]
	public ExportAliasNameContext exportAliasName() {
		ExportAliasNameContext _localctx = new ExportAliasNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_exportAliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			moduleExportName();
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 326;
				Match(As);
				State = 327;
				moduleExportName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_declaration);
		try {
			State = 333;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Var:
			case Const:
			case StrictLet:
			case NonStrictLet:
				EnterOuterAlt(_localctx, 1);
				{
				State = 330;
				variableStatement();
				}
				break;
			case Class:
				EnterOuterAlt(_localctx, 2);
				{
				State = 331;
				classDeclaration();
				}
				break;
			case Function_:
			case Async:
				EnterOuterAlt(_localctx, 3);
				{
				State = 332;
				functionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public VariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableStatement(this);
		}
	}

	[RuleVersion(0)]
	public VariableStatementContext variableStatement() {
		VariableStatementContext _localctx = new VariableStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_variableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			variableDeclarationList();
			State = 336;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarModifierContext varModifier() {
			return GetRuleContext<VarModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 42, RULE_variableDeclarationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			varModifier();
			State = 339;
			variableDeclaration();
			State = 344;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 340;
					Match(Comma);
					State = 341;
					variableDeclaration();
					}
					} 
				}
				State = 346;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			assignable();
			State = 350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 348;
				Match(Assign);
				State = 349;
				singleExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatement_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(JavaScriptParser.SemiColon, 0); }
		public EmptyStatement_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement_(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatement_Context emptyStatement_() {
		EmptyStatement_Context _localctx = new EmptyStatement_Context(Context, State);
		EnterRule(_localctx, 46, RULE_emptyStatement_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			if (!(this.notOpenBraceAndNotFunction())) throw new FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
			State = 355;
			expressionSequence();
			State = 356;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(JavaScriptParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(JavaScriptParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			Match(If);
			State = 359;
			Match(OpenParen);
			State = 360;
			expressionSequence();
			State = 361;
			Match(CloseParen);
			State = 362;
			statement();
			State = 365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 363;
				Match(Else);
				State = 364;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DoStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(JavaScriptParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(JavaScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DoStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
	}
	public partial class WhileStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(JavaScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}
	public partial class ForStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(JavaScriptParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(JavaScriptParser.SemiColon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext[] expressionSequence() {
			return GetRuleContexts<ExpressionSequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence(int i) {
			return GetRuleContext<ExpressionSequenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		public ForStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}
	public partial class ForInStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(JavaScriptParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		public ForInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterForInStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitForInStatement(this);
		}
	}
	public partial class ForOfStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Of() { return GetToken(JavaScriptParser.Of, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(JavaScriptParser.Await, 0); }
		public ForOfStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterForOfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitForOfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_iterationStatement);
		int _la;
		try {
			State = 422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 367;
				Match(Do);
				State = 368;
				statement();
				State = 369;
				Match(While);
				State = 370;
				Match(OpenParen);
				State = 371;
				expressionSequence();
				State = 372;
				Match(CloseParen);
				State = 373;
				eos();
				}
				break;
			case 2:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 375;
				Match(While);
				State = 376;
				Match(OpenParen);
				State = 377;
				expressionSequence();
				State = 378;
				Match(CloseParen);
				State = 379;
				statement();
				}
				break;
			case 3:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 381;
				Match(For);
				State = 382;
				Match(OpenParen);
				State = 385;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 383;
					expressionSequence();
					}
					break;
				case 2:
					{
					State = 384;
					variableDeclarationList();
					}
					break;
				}
				State = 387;
				Match(SemiColon);
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4611686018361326928L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2305843009213693951L) != 0)) {
					{
					State = 388;
					expressionSequence();
					}
				}

				State = 391;
				Match(SemiColon);
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4611686018361326928L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2305843009213693951L) != 0)) {
					{
					State = 392;
					expressionSequence();
					}
				}

				State = 395;
				Match(CloseParen);
				State = 396;
				statement();
				}
				break;
			case 4:
				_localctx = new ForInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 397;
				Match(For);
				State = 398;
				Match(OpenParen);
				State = 401;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 399;
					singleExpression(0);
					}
					break;
				case 2:
					{
					State = 400;
					variableDeclarationList();
					}
					break;
				}
				State = 403;
				Match(In);
				State = 404;
				expressionSequence();
				State = 405;
				Match(CloseParen);
				State = 406;
				statement();
				}
				break;
			case 5:
				_localctx = new ForOfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 408;
				Match(For);
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Await) {
					{
					State = 409;
					Match(Await);
					}
				}

				State = 412;
				Match(OpenParen);
				State = 415;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 413;
					singleExpression(0);
					}
					break;
				case 2:
					{
					State = 414;
					variableDeclarationList();
					}
					break;
				}
				State = 417;
				Match(Of);
				State = 418;
				expressionSequence();
				State = 419;
				Match(CloseParen);
				State = 420;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(JavaScriptParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Let_Context let_() {
			return GetRuleContext<Let_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(JavaScriptParser.Const, 0); }
		public VarModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVarModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVarModifier(this);
		}
	}

	[RuleVersion(0)]
	public VarModifierContext varModifier() {
		VarModifierContext _localctx = new VarModifierContext(Context, State);
		EnterRule(_localctx, 54, RULE_varModifier);
		try {
			State = 427;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Var:
				EnterOuterAlt(_localctx, 1);
				{
				State = 424;
				Match(Var);
				}
				break;
			case StrictLet:
			case NonStrictLet:
				EnterOuterAlt(_localctx, 2);
				{
				State = 425;
				let_();
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 3);
				{
				State = 426;
				Match(Const);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(JavaScriptParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			Match(Continue);
			State = 432;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 430;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 431;
				identifier();
				}
				break;
			}
			State = 434;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(JavaScriptParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			Match(Break);
			State = 439;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 437;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 438;
				identifier();
				}
				break;
			}
			State = 441;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(JavaScriptParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			Match(Return);
			State = 446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 444;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 445;
				expressionSequence();
				}
				break;
			}
			State = 448;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(JavaScriptParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YieldStar() { return GetToken(JavaScriptParser.YieldStar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitYieldStatement(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_yieldStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			_la = TokenStream.LA(1);
			if ( !(_la==Yield || _la==YieldStar) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 453;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 451;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 452;
				expressionSequence();
				}
				break;
			}
			State = 455;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(JavaScriptParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WithStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWithStatement(this);
		}
	}

	[RuleVersion(0)]
	public WithStatementContext withStatement() {
		WithStatementContext _localctx = new WithStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_withStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			Match(With);
			State = 458;
			Match(OpenParen);
			State = 459;
			expressionSequence();
			State = 460;
			Match(CloseParen);
			State = 461;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(JavaScriptParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			Match(Switch);
			State = 464;
			Match(OpenParen);
			State = 465;
			expressionSequence();
			State = 466;
			Match(CloseParen);
			State = 467;
			caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext[] caseClauses() {
			return GetRuleContexts<CaseClausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext caseClauses(int i) {
			return GetRuleContext<CaseClausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultClauseContext defaultClause() {
			return GetRuleContext<DefaultClauseContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 68, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			Match(OpenBrace);
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Case) {
				{
				State = 470;
				caseClauses();
				}
			}

			State = 477;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Default) {
				{
				State = 473;
				defaultClause();
				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Case) {
					{
					State = 474;
					caseClauses();
					}
				}

				}
			}

			State = 479;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseClauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseClauses(this);
		}
	}

	[RuleVersion(0)]
	public CaseClausesContext caseClauses() {
		CaseClausesContext _localctx = new CaseClausesContext(Context, State);
		EnterRule(_localctx, 70, RULE_caseClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 481;
				caseClause();
				}
				}
				State = 484;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Case );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(JavaScriptParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseClause(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 72, RULE_caseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			Match(Case);
			State = 487;
			expressionSequence();
			State = 488;
			Match(Colon);
			State = 490;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 489;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(JavaScriptParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDefaultClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDefaultClause(this);
		}
	}

	[RuleVersion(0)]
	public DefaultClauseContext defaultClause() {
		DefaultClauseContext _localctx = new DefaultClauseContext(Context, State);
		EnterRule(_localctx, 74, RULE_defaultClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			Match(Default);
			State = 493;
			Match(Colon);
			State = 495;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 494;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLabelledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLabelledStatement(this);
		}
	}

	[RuleVersion(0)]
	public LabelledStatementContext labelledStatement() {
		LabelledStatementContext _localctx = new LabelledStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_labelledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			identifier();
			State = 498;
			Match(Colon);
			State = 499;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(JavaScriptParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			Match(Throw);
			State = 502;
			if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
			State = 503;
			expressionSequence();
			State = 504;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(JavaScriptParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext catchProduction() {
			return GetRuleContext<CatchProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_tryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			Match(Try);
			State = 507;
			block();
			State = 513;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Catch:
				{
				State = 508;
				catchProduction();
				State = 510;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 509;
					finallyProduction();
					}
					break;
				}
				}
				break;
			case Finally:
				{
				State = 512;
				finallyProduction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(JavaScriptParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCatchProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCatchProduction(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 82, RULE_catchProduction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			Match(Catch);
			State = 521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenParen) {
				{
				State = 516;
				Match(OpenParen);
				State = 518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpenBracket || _la==OpenBrace || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 1125899906842623L) != 0)) {
					{
					State = 517;
					assignable();
					}
				}

				State = 520;
				Match(CloseParen);
				}
			}

			State = 523;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(JavaScriptParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFinallyProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFinallyProduction(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 84, RULE_finallyProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			Match(Finally);
			State = 526;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebuggerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Debugger() { return GetToken(JavaScriptParser.Debugger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DebuggerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debuggerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDebuggerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDebuggerStatement(this);
		}
	}

	[RuleVersion(0)]
	public DebuggerStatementContext debuggerStatement() {
		DebuggerStatementContext _localctx = new DebuggerStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_debuggerStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			Match(Debugger);
			State = 529;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(JavaScriptParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 88, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Async) {
				{
				State = 531;
				Match(Async);
				}
			}

			State = 534;
			Match(Function_);
			State = 536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Multiply) {
				{
				State = 535;
				Match(Multiply);
				}
			}

			State = 538;
			identifier();
			State = 539;
			Match(OpenParen);
			State = 541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 262688L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 1125899906842623L) != 0)) {
				{
				State = 540;
				formalParameterList();
				}
			}

			State = 543;
			Match(CloseParen);
			State = 544;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(JavaScriptParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 90, RULE_classDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			Match(Class);
			State = 547;
			identifier();
			State = 548;
			classTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(JavaScriptParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext[] classElement() {
			return GetRuleContexts<ClassElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext classElement(int i) {
			return GetRuleContext<ClassElementContext>(i);
		}
		public ClassTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassTail(this);
		}
	}

	[RuleVersion(0)]
	public ClassTailContext classTail() {
		ClassTailContext _localctx = new ClassTailContext(Context, State);
		EnterRule(_localctx, 92, RULE_classTail);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extends) {
				{
				State = 550;
				Match(Extends);
				State = 551;
				singleExpression(0);
				}
			}

			State = 554;
			Match(OpenBrace);
			State = 558;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 555;
					classElement();
					}
					} 
				}
				State = 560;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			State = 561;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(JavaScriptParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext fieldDefinition() {
			return GetRuleContext<FieldDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context emptyStatement_() {
			return GetRuleContext<EmptyStatement_Context>(0);
		}
		public ClassElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassElement(this);
		}
	}

	[RuleVersion(0)]
	public ClassElementContext classElement() {
		ClassElementContext _localctx = new ClassElementContext(Context, State);
		EnterRule(_localctx, 94, RULE_classElement);
		try {
			State = 582;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 566;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 563;
					Match(Static);
					}
					break;
				case 2:
					{
					State = 564;
					if (!(this.n("static"))) throw new FailedPredicateException(this, "this.n(\"static\")");
					State = 565;
					identifier();
					}
					break;
				}
				State = 568;
				methodDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 572;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 569;
					Match(Static);
					}
					break;
				case 2:
					{
					State = 570;
					if (!(this.n("static"))) throw new FailedPredicateException(this, "this.n(\"static\")");
					State = 571;
					identifier();
					}
					break;
				}
				State = 574;
				fieldDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 578;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 575;
					Match(Static);
					}
					break;
				case 2:
					{
					State = 576;
					if (!(this.n("static"))) throw new FailedPredicateException(this, "this.n(\"static\")");
					State = 577;
					identifier();
					}
					break;
				}
				State = 580;
				block();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 581;
				emptyStatement_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementNameContext classElementName() {
			return GetRuleContext<ClassElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetterContext getter() {
			return GetRuleContext<GetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetterContext setter() {
			return GetRuleContext<SetterContext>(0);
		}
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMethodDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMethodDefinition(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(Context, State);
		EnterRule(_localctx, 96, RULE_methodDefinition);
		int _la;
		try {
			State = 618;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 586;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 584;
					Match(Async);
					State = 585;
					if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
					}
					break;
				}
				State = 589;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 588;
					Match(Multiply);
					}
				}

				State = 591;
				classElementName();
				State = 592;
				Match(OpenParen);
				State = 594;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 262688L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 1125899906842623L) != 0)) {
					{
					State = 593;
					formalParameterList();
					}
				}

				State = 596;
				Match(CloseParen);
				State = 597;
				functionBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 600;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 599;
					Match(Multiply);
					}
					break;
				}
				State = 602;
				getter();
				State = 603;
				Match(OpenParen);
				State = 604;
				Match(CloseParen);
				State = 605;
				functionBody();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 608;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 607;
					Match(Multiply);
					}
					break;
				}
				State = 610;
				setter();
				State = 611;
				Match(OpenParen);
				State = 613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 262688L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 1125899906842623L) != 0)) {
					{
					State = 612;
					formalParameterList();
					}
				}

				State = 615;
				Match(CloseParen);
				State = 616;
				functionBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementNameContext classElementName() {
			return GetRuleContext<ClassElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFieldDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFieldDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 98, RULE_fieldDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			classElementName();
			State = 622;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 621;
				initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassElementNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivateIdentifierContext privateIdentifier() {
			return GetRuleContext<PrivateIdentifierContext>(0);
		}
		public ClassElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classElementName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassElementName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassElementName(this);
		}
	}

	[RuleVersion(0)]
	public ClassElementNameContext classElementName() {
		ClassElementNameContext _localctx = new ClassElementNameContext(Context, State);
		EnterRule(_localctx, 100, RULE_classElementName);
		try {
			State = 626;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
			case NullLiteral:
			case BooleanLiteral:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Of:
			case Yield:
			case YieldStar:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 624;
				propertyName();
				}
				break;
			case Hashtag:
				EnterOuterAlt(_localctx, 2);
				{
				State = 625;
				privateIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivateIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(JavaScriptParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public PrivateIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privateIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPrivateIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPrivateIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public PrivateIdentifierContext privateIdentifier() {
		PrivateIdentifierContext _localctx = new PrivateIdentifierContext(Context, State);
		EnterRule(_localctx, 102, RULE_privateIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			Match(Hashtag);
			State = 629;
			identifierName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext[] formalParameterArg() {
			return GetRuleContexts<FormalParameterArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg(int i) {
			return GetRuleContext<FormalParameterArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LastFormalParameterArgContext lastFormalParameterArg() {
			return GetRuleContext<LastFormalParameterArgContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 104, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			State = 644;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
			case OpenBrace:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Of:
			case Yield:
			case YieldStar:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 631;
				formalParameterArg();
				State = 636;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 632;
						Match(Comma);
						State = 633;
						formalParameterArg();
						}
						} 
					}
					State = 638;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
				}
				State = 641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 639;
					Match(Comma);
					State = 640;
					lastFormalParameterArg();
					}
				}

				}
				break;
			case Ellipsis:
				EnterOuterAlt(_localctx, 2);
				{
				State = 643;
				lastFormalParameterArg();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public FormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterArg(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterArgContext formalParameterArg() {
		FormalParameterArgContext _localctx = new FormalParameterArgContext(Context, State);
		EnterRule(_localctx, 106, RULE_formalParameterArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646;
			assignable();
			State = 649;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 647;
				Match(Assign);
				State = 648;
				singleExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public LastFormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLastFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLastFormalParameterArg(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterArgContext lastFormalParameterArg() {
		LastFormalParameterArgContext _localctx = new LastFormalParameterArgContext(Context, State);
		EnterRule(_localctx, 108, RULE_lastFormalParameterArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			Match(Ellipsis);
			State = 652;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 110, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654;
			Match(OpenBrace);
			State = 656;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 655;
				sourceElements();
				}
				break;
			}
			State = 658;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext[] sourceElement() {
			return GetRuleContexts<SourceElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext sourceElement(int i) {
			return GetRuleContext<SourceElementContext>(i);
		}
		public SourceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSourceElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSourceElements(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementsContext sourceElements() {
		SourceElementsContext _localctx = new SourceElementsContext(Context, State);
		EnterRule(_localctx, 112, RULE_sourceElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 661;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 660;
					sourceElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 663;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 114, RULE_arrayLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 665;
			Match(OpenBracket);
			State = 666;
			elementList();
			State = 667;
			Match(CloseBracket);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext[] arrayElement() {
			return GetRuleContexts<ArrayElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext arrayElement(int i) {
			return GetRuleContext<ArrayElementContext>(i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterElementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitElementList(this);
		}
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 116, RULE_elementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 672;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 669;
					Match(Comma);
					}
					} 
				}
				State = 674;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			State = 676;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4611686018361064784L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2305843009213693951L) != 0)) {
				{
				State = 675;
				arrayElement();
				}
			}

			State = 686;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 679;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 678;
						Match(Comma);
						}
						}
						State = 681;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==Comma );
					State = 683;
					arrayElement();
					}
					} 
				}
				State = 688;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			}
			State = 692;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 689;
				Match(Comma);
				}
				}
				State = 694;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayElement(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(Context, State);
		EnterRule(_localctx, 118, RULE_arrayElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 695;
				Match(Ellipsis);
				}
			}

			State = 698;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
	 
		public PropertyAssignmentContext() { }
		public virtual void CopyFrom(PropertyAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyExpressionAssignmentContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyExpressionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyExpressionAssignment(this);
		}
	}
	public partial class ComputedPropertyExpressionAssignmentContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		public ComputedPropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterComputedPropertyExpressionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitComputedPropertyExpressionAssignment(this);
		}
	}
	public partial class PropertyShorthandContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		public PropertyShorthandContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyShorthand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyShorthand(this);
		}
	}
	public partial class PropertySetterContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetterContext setter() {
			return GetRuleContext<SetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg() {
			return GetRuleContext<FormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertySetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertySetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertySetter(this);
		}
	}
	public partial class PropertyGetterContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public GetterContext getter() {
			return GetRuleContext<GetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public PropertyGetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyGetter(this);
		}
	}
	public partial class FunctionPropertyContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionPropertyContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 120, RULE_propertyAssignment);
		int _la;
		try {
			State = 739;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				_localctx = new PropertyExpressionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 700;
				propertyName();
				State = 701;
				Match(Colon);
				State = 702;
				singleExpression(0);
				}
				break;
			case 2:
				_localctx = new ComputedPropertyExpressionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 704;
				Match(OpenBracket);
				State = 705;
				singleExpression(0);
				State = 706;
				Match(CloseBracket);
				State = 707;
				Match(Colon);
				State = 708;
				singleExpression(0);
				}
				break;
			case 3:
				_localctx = new FunctionPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 711;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
				case 1:
					{
					State = 710;
					Match(Async);
					}
					break;
				}
				State = 714;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 713;
					Match(Multiply);
					}
				}

				State = 716;
				propertyName();
				State = 717;
				Match(OpenParen);
				State = 719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 262688L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 1125899906842623L) != 0)) {
					{
					State = 718;
					formalParameterList();
					}
				}

				State = 721;
				Match(CloseParen);
				State = 722;
				functionBody();
				}
				break;
			case 4:
				_localctx = new PropertyGetterContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 724;
				getter();
				State = 725;
				Match(OpenParen);
				State = 726;
				Match(CloseParen);
				State = 727;
				functionBody();
				}
				break;
			case 5:
				_localctx = new PropertySetterContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 729;
				setter();
				State = 730;
				Match(OpenParen);
				State = 731;
				formalParameterArg();
				State = 732;
				Match(CloseParen);
				State = 733;
				functionBody();
				}
				break;
			case 6:
				_localctx = new PropertyShorthandContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 736;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 735;
					Match(Ellipsis);
					}
				}

				State = 738;
				singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyName(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 122, RULE_propertyName);
		try {
			State = 748;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Of:
			case Yield:
			case YieldStar:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 741;
				identifierName();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 742;
				Match(StringLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 743;
				numericLiteral();
				}
				break;
			case OpenBracket:
				EnterOuterAlt(_localctx, 4);
				{
				State = 744;
				Match(OpenBracket);
				State = 745;
				singleExpression(0);
				State = 746;
				Match(CloseBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 124, RULE_arguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 750;
			Match(OpenParen);
			State = 762;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4611686018361064784L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2305843009213693951L) != 0)) {
				{
				State = 751;
				argument();
				State = 756;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 752;
						Match(Comma);
						State = 753;
						argument();
						}
						} 
					}
					State = 758;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
				}
				State = 760;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 759;
					Match(Comma);
					}
				}

				}
			}

			State = 764;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 126, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 766;
				Match(Ellipsis);
				}
			}

			State = 771;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 769;
				singleExpression(0);
				}
				break;
			case 2:
				{
				State = 770;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionSequence(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 128, RULE_expressionSequence);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			singleExpression(0);
			State = 778;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 774;
					Match(Comma);
					State = 775;
					singleExpression(0);
					}
					} 
				}
				State = 780;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
	 
		public SingleExpressionContext() { }
		public virtual void CopyFrom(SingleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TemplateStringExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringLiteralContext templateStringLiteral() {
			return GetRuleContext<TemplateStringLiteralContext>(0);
		}
		public TemplateStringExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringExpression(this);
		}
	}
	public partial class TernaryExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(JavaScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		public TernaryExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
	}
	public partial class LogicalAndExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(JavaScriptParser.And, 0); }
		public LogicalAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
	}
	public partial class PowerExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(JavaScriptParser.Power, 0); }
		public PowerExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPowerExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPowerExpression(this);
		}
	}
	public partial class PreIncrementExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(JavaScriptParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
		}
	}
	public partial class ObjectLiteralExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ObjectLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteralExpression(this);
		}
	}
	public partial class MetaExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(JavaScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(JavaScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MetaExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMetaExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMetaExpression(this);
		}
	}
	public partial class InExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(JavaScriptParser.In, 0); }
		public InExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
	}
	public partial class LogicalOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(JavaScriptParser.Or, 0); }
		public LogicalOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
	}
	public partial class OptionalChainExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkDot() { return GetToken(JavaScriptParser.QuestionMarkDot, 0); }
		public OptionalChainExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterOptionalChainExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitOptionalChainExpression(this);
		}
	}
	public partial class NotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(JavaScriptParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public NotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
	}
	public partial class PreDecreaseExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(JavaScriptParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPreDecreaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPreDecreaseExpression(this);
		}
	}
	public partial class ArgumentsExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ArgumentsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArgumentsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArgumentsExpression(this);
		}
	}
	public partial class AwaitExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(JavaScriptParser.Await, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public AwaitExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAwaitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAwaitExpression(this);
		}
	}
	public partial class ThisExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(JavaScriptParser.This, 0); }
		public ThisExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
	}
	public partial class FunctionExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnonymousFunctionContext anonymousFunction() {
			return GetRuleContext<AnonymousFunctionContext>(0);
		}
		public FunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionExpression(this);
		}
	}
	public partial class UnaryMinusExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(JavaScriptParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterUnaryMinusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitUnaryMinusExpression(this);
		}
	}
	public partial class AssignmentExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		public AssignmentExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}
	public partial class PostDecreaseExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(JavaScriptParser.MinusMinus, 0); }
		public PostDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPostDecreaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPostDecreaseExpression(this);
		}
	}
	public partial class TypeofExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typeof() { return GetToken(JavaScriptParser.Typeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public TypeofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeofExpression(this);
		}
	}
	public partial class InstanceofExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(JavaScriptParser.Instanceof, 0); }
		public InstanceofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInstanceofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInstanceofExpression(this);
		}
	}
	public partial class UnaryPlusExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(JavaScriptParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryPlusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterUnaryPlusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitUnaryPlusExpression(this);
		}
	}
	public partial class DeleteExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(JavaScriptParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public DeleteExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDeleteExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDeleteExpression(this);
		}
	}
	public partial class ImportExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(JavaScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public ImportExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportExpression(this);
		}
	}
	public partial class EqualityExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(JavaScriptParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(JavaScriptParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityEquals() { return GetToken(JavaScriptParser.IdentityEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityNotEquals() { return GetToken(JavaScriptParser.IdentityNotEquals, 0); }
		public EqualityExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
	}
	public partial class BitXOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr() { return GetToken(JavaScriptParser.BitXOr, 0); }
		public BitXOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitXOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitXOrExpression(this);
		}
	}
	public partial class SuperExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(JavaScriptParser.Super, 0); }
		public SuperExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSuperExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSuperExpression(this);
		}
	}
	public partial class MultiplicativeExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(JavaScriptParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulus() { return GetToken(JavaScriptParser.Modulus, 0); }
		public MultiplicativeExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
	}
	public partial class BitShiftExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic() { return GetToken(JavaScriptParser.LeftShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(JavaScriptParser.RightShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogical() { return GetToken(JavaScriptParser.RightShiftLogical, 0); }
		public BitShiftExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitShiftExpression(this);
		}
	}
	public partial class ParenthesizedExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public ParenthesizedExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
	}
	public partial class AdditiveExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(JavaScriptParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(JavaScriptParser.Minus, 0); }
		public AdditiveExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
	}
	public partial class RelationalExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(JavaScriptParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(JavaScriptParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(JavaScriptParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(JavaScriptParser.GreaterThanEquals, 0); }
		public RelationalExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
	}
	public partial class PostIncrementExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(JavaScriptParser.PlusPlus, 0); }
		public PostIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression(this);
		}
	}
	public partial class YieldExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		public YieldExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterYieldExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitYieldExpression(this);
		}
	}
	public partial class BitNotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(JavaScriptParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public BitNotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitNotExpression(this);
		}
	}
	public partial class NewExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(JavaScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public NewExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
	}
	public partial class LiteralExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
	}
	public partial class ArrayLiteralExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteralExpression(this);
		}
	}
	public partial class MemberDotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(JavaScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(JavaScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(JavaScriptParser.Hashtag, 0); }
		public MemberDotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMemberDotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMemberDotExpression(this);
		}
	}
	public partial class ClassExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(JavaScriptParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ClassExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassExpression(this);
		}
	}
	public partial class MemberIndexExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMarkDot() { return GetToken(JavaScriptParser.QuestionMarkDot, 0); }
		public MemberIndexExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMemberIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMemberIndexExpression(this);
		}
	}
	public partial class IdentifierExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
	}
	public partial class BitAndExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(JavaScriptParser.BitAnd, 0); }
		public BitAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitAndExpression(this);
		}
	}
	public partial class BitOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(JavaScriptParser.BitOr, 0); }
		public BitOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitOrExpression(this);
		}
	}
	public partial class AssignmentOperatorExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentOperatorExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperatorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperatorExpression(this);
		}
	}
	public partial class VoidExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(JavaScriptParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VoidExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVoidExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVoidExpression(this);
		}
	}
	public partial class CoalesceExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullCoalesce() { return GetToken(JavaScriptParser.NullCoalesce, 0); }
		public CoalesceExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		return singleExpression(0);
	}

	private SingleExpressionContext singleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
		SingleExpressionContext _prevctx = _localctx;
		int _startState = 130;
		EnterRecursionRule(_localctx, 130, RULE_singleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 837;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 782;
				anonymousFunction();
				}
				break;
			case 2:
				{
				_localctx = new ClassExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 783;
				Match(Class);
				State = 785;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & 8458255L) != 0)) {
					{
					State = 784;
					identifier();
					}
				}

				State = 787;
				classTail();
				}
				break;
			case 3:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 788;
				Match(New);
				State = 789;
				identifier();
				State = 790;
				arguments();
				}
				break;
			case 4:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 792;
				Match(New);
				State = 793;
				singleExpression(0);
				State = 794;
				arguments();
				}
				break;
			case 5:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 796;
				Match(New);
				State = 797;
				singleExpression(42);
				}
				break;
			case 6:
				{
				_localctx = new MetaExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 798;
				Match(New);
				State = 799;
				Match(Dot);
				State = 800;
				identifier();
				}
				break;
			case 7:
				{
				_localctx = new DeleteExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 801;
				Match(Delete);
				State = 802;
				singleExpression(37);
				}
				break;
			case 8:
				{
				_localctx = new VoidExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 803;
				Match(Void);
				State = 804;
				singleExpression(36);
				}
				break;
			case 9:
				{
				_localctx = new TypeofExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 805;
				Match(Typeof);
				State = 806;
				singleExpression(35);
				}
				break;
			case 10:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 807;
				Match(PlusPlus);
				State = 808;
				singleExpression(34);
				}
				break;
			case 11:
				{
				_localctx = new PreDecreaseExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 809;
				Match(MinusMinus);
				State = 810;
				singleExpression(33);
				}
				break;
			case 12:
				{
				_localctx = new UnaryPlusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 811;
				Match(Plus);
				State = 812;
				singleExpression(32);
				}
				break;
			case 13:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 813;
				Match(Minus);
				State = 814;
				singleExpression(31);
				}
				break;
			case 14:
				{
				_localctx = new BitNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 815;
				Match(BitNot);
				State = 816;
				singleExpression(30);
				}
				break;
			case 15:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 817;
				Match(Not);
				State = 818;
				singleExpression(29);
				}
				break;
			case 16:
				{
				_localctx = new AwaitExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 819;
				Match(Await);
				State = 820;
				singleExpression(28);
				}
				break;
			case 17:
				{
				_localctx = new ImportExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 821;
				Match(Import);
				State = 822;
				Match(OpenParen);
				State = 823;
				singleExpression(0);
				State = 824;
				Match(CloseParen);
				}
				break;
			case 18:
				{
				_localctx = new YieldExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 826;
				yieldStatement();
				}
				break;
			case 19:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 827;
				Match(This);
				}
				break;
			case 20:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 828;
				identifier();
				}
				break;
			case 21:
				{
				_localctx = new SuperExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 829;
				Match(Super);
				}
				break;
			case 22:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 830;
				literal();
				}
				break;
			case 23:
				{
				_localctx = new ArrayLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 831;
				arrayLiteral();
				}
				break;
			case 24:
				{
				_localctx = new ObjectLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 832;
				objectLiteral();
				}
				break;
			case 25:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 833;
				Match(OpenParen);
				State = 834;
				expressionSequence();
				State = 835;
				Match(CloseParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 926;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 924;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
					case 1:
						{
						_localctx = new OptionalChainExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 839;
						if (!(Precpred(Context, 47))) throw new FailedPredicateException(this, "Precpred(Context, 47)");
						State = 840;
						Match(QuestionMarkDot);
						State = 841;
						singleExpression(48);
						}
						break;
					case 2:
						{
						_localctx = new PowerExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 842;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 843;
						Match(Power);
						State = 844;
						singleExpression(27);
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 845;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 846;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 469762048L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 847;
						singleExpression(27);
						}
						break;
					case 4:
						{
						_localctx = new AdditiveExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 848;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 849;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 850;
						singleExpression(26);
						}
						break;
					case 5:
						{
						_localctx = new CoalesceExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 851;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 852;
						Match(NullCoalesce);
						State = 853;
						singleExpression(25);
						}
						break;
					case 6:
						{
						_localctx = new BitShiftExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 854;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 855;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30064771072L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 856;
						singleExpression(24);
						}
						break;
					case 7:
						{
						_localctx = new RelationalExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 857;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 858;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 515396075520L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 859;
						singleExpression(23);
						}
						break;
					case 8:
						{
						_localctx = new InstanceofExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 860;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 861;
						Match(Instanceof);
						State = 862;
						singleExpression(22);
						}
						break;
					case 9:
						{
						_localctx = new InExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 863;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 864;
						Match(In);
						State = 865;
						singleExpression(21);
						}
						break;
					case 10:
						{
						_localctx = new EqualityExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 866;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 867;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8246337208320L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 868;
						singleExpression(20);
						}
						break;
					case 11:
						{
						_localctx = new BitAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 869;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 870;
						Match(BitAnd);
						State = 871;
						singleExpression(19);
						}
						break;
					case 12:
						{
						_localctx = new BitXOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 872;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 873;
						Match(BitXOr);
						State = 874;
						singleExpression(18);
						}
						break;
					case 13:
						{
						_localctx = new BitOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 875;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 876;
						Match(BitOr);
						State = 877;
						singleExpression(17);
						}
						break;
					case 14:
						{
						_localctx = new LogicalAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 878;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 879;
						Match(And);
						State = 880;
						singleExpression(16);
						}
						break;
					case 15:
						{
						_localctx = new LogicalOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 881;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 882;
						Match(Or);
						State = 883;
						singleExpression(15);
						}
						break;
					case 16:
						{
						_localctx = new TernaryExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 884;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 885;
						Match(QuestionMark);
						State = 886;
						singleExpression(0);
						State = 887;
						Match(Colon);
						State = 888;
						singleExpression(14);
						}
						break;
					case 17:
						{
						_localctx = new AssignmentExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 890;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 891;
						Match(Assign);
						State = 892;
						singleExpression(12);
						}
						break;
					case 18:
						{
						_localctx = new AssignmentOperatorExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 893;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 894;
						assignmentOperator();
						State = 895;
						singleExpression(11);
						}
						break;
					case 19:
						{
						_localctx = new MemberIndexExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 897;
						if (!(Precpred(Context, 46))) throw new FailedPredicateException(this, "Precpred(Context, 46)");
						State = 899;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==QuestionMarkDot) {
							{
							State = 898;
							Match(QuestionMarkDot);
							}
						}

						State = 901;
						Match(OpenBracket);
						State = 902;
						expressionSequence();
						State = 903;
						Match(CloseBracket);
						}
						break;
					case 20:
						{
						_localctx = new MemberDotExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 905;
						if (!(Precpred(Context, 45))) throw new FailedPredicateException(this, "Precpred(Context, 45)");
						State = 907;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==QuestionMark) {
							{
							State = 906;
							Match(QuestionMark);
							}
						}

						State = 909;
						Match(Dot);
						State = 911;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Hashtag) {
							{
							State = 910;
							Match(Hashtag);
							}
						}

						State = 913;
						identifierName();
						}
						break;
					case 21:
						{
						_localctx = new ArgumentsExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 914;
						if (!(Precpred(Context, 41))) throw new FailedPredicateException(this, "Precpred(Context, 41)");
						State = 915;
						arguments();
						}
						break;
					case 22:
						{
						_localctx = new PostIncrementExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 916;
						if (!(Precpred(Context, 39))) throw new FailedPredicateException(this, "Precpred(Context, 39)");
						State = 917;
						if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
						State = 918;
						Match(PlusPlus);
						}
						break;
					case 23:
						{
						_localctx = new PostDecreaseExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 919;
						if (!(Precpred(Context, 38))) throw new FailedPredicateException(this, "Precpred(Context, 38)");
						State = 920;
						if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
						State = 921;
						Match(MinusMinus);
						}
						break;
					case 24:
						{
						_localctx = new TemplateStringExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 922;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 923;
						templateStringLiteral();
						}
						break;
					}
					} 
				}
				State = 928;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 132, RULE_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929;
			Match(Assign);
			State = 930;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public AssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignable(this);
		}
	}

	[RuleVersion(0)]
	public AssignableContext assignable() {
		AssignableContext _localctx = new AssignableContext(Context, State);
		EnterRule(_localctx, 134, RULE_assignable);
		try {
			State = 936;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 932;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 933;
				keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 934;
				arrayLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 935;
				objectLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 136, RULE_objectLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 938;
			Match(OpenBrace);
			State = 950;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 939;
				propertyAssignment();
				State = 944;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 940;
						Match(Comma);
						State = 941;
						propertyAssignment();
						}
						} 
					}
					State = 946;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
				}
				State = 948;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 947;
					Match(Comma);
					}
				}

				}
				break;
			}
			State = 952;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFunctionContext : ParserRuleContext {
		public AnonymousFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousFunction; } }
	 
		public AnonymousFunctionContext() { }
		public virtual void CopyFrom(AnonymousFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnonymousFunctionDeclContext : AnonymousFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(JavaScriptParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public AnonymousFunctionDeclContext(AnonymousFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAnonymousFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAnonymousFunctionDecl(this);
		}
	}
	public partial class ArrowFunctionContext : AnonymousFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrowFunctionParametersContext arrowFunctionParameters() {
			return GetRuleContext<ArrowFunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(JavaScriptParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrowFunctionBodyContext arrowFunctionBody() {
			return GetRuleContext<ArrowFunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		public ArrowFunctionContext(AnonymousFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunction(this);
		}
	}
	public partial class NamedFunctionContext : AnonymousFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public NamedFunctionContext(AnonymousFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterNamedFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitNamedFunction(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFunctionContext anonymousFunction() {
		AnonymousFunctionContext _localctx = new AnonymousFunctionContext(Context, State);
		EnterRule(_localctx, 138, RULE_anonymousFunction);
		int _la;
		try {
			State = 975;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				_localctx = new NamedFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 954;
				functionDeclaration();
				}
				break;
			case 2:
				_localctx = new AnonymousFunctionDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 956;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Async) {
					{
					State = 955;
					Match(Async);
					}
				}

				State = 958;
				Match(Function_);
				State = 960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 959;
					Match(Multiply);
					}
				}

				State = 962;
				Match(OpenParen);
				State = 964;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 262688L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 1125899906842623L) != 0)) {
					{
					State = 963;
					formalParameterList();
					}
				}

				State = 966;
				Match(CloseParen);
				State = 967;
				functionBody();
				}
				break;
			case 3:
				_localctx = new ArrowFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 969;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
				case 1:
					{
					State = 968;
					Match(Async);
					}
					break;
				}
				State = 971;
				arrowFunctionParameters();
				State = 972;
				Match(ARROW);
				State = 973;
				arrowFunctionBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowFunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ArrowFunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowFunctionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionParameters(this);
		}
	}

	[RuleVersion(0)]
	public ArrowFunctionParametersContext arrowFunctionParameters() {
		ArrowFunctionParametersContext _localctx = new ArrowFunctionParametersContext(Context, State);
		EnterRule(_localctx, 140, RULE_arrowFunctionParameters);
		int _la;
		try {
			State = 983;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
			case NullLiteral:
			case BooleanLiteral:
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Of:
			case Yield:
			case YieldStar:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 977;
				propertyName();
				}
				break;
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 978;
				Match(OpenParen);
				State = 980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 262688L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 1125899906842623L) != 0)) {
					{
					State = 979;
					formalParameterList();
					}
				}

				State = 982;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowFunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ArrowFunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowFunctionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionBody(this);
		}
	}

	[RuleVersion(0)]
	public ArrowFunctionBodyContext arrowFunctionBody() {
		ArrowFunctionBodyContext _localctx = new ArrowFunctionBodyContext(Context, State);
		EnterRule(_localctx, 142, RULE_arrowFunctionBody);
		try {
			State = 987;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 985;
				singleExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 986;
				functionBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplyAssign() { return GetToken(JavaScriptParser.MultiplyAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivideAssign() { return GetToken(JavaScriptParser.DivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssign() { return GetToken(JavaScriptParser.ModulusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(JavaScriptParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(JavaScriptParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmeticAssign() { return GetToken(JavaScriptParser.LeftShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmeticAssign() { return GetToken(JavaScriptParser.RightShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogicalAssign() { return GetToken(JavaScriptParser.RightShiftLogicalAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAndAssign() { return GetToken(JavaScriptParser.BitAndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXorAssign() { return GetToken(JavaScriptParser.BitXorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOrAssign() { return GetToken(JavaScriptParser.BitOrAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PowerAssign() { return GetToken(JavaScriptParser.PowerAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullishCoalescingAssign() { return GetToken(JavaScriptParser.NullishCoalescingAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 144, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 989;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2305561534236983296L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(JavaScriptParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(JavaScriptParser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringLiteralContext templateStringLiteral() {
			return GetRuleContext<TemplateStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegularExpressionLiteral() { return GetToken(JavaScriptParser.RegularExpressionLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BigintLiteralContext bigintLiteral() {
			return GetRuleContext<BigintLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 146, RULE_literal);
		try {
			State = 998;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 991;
				Match(NullLiteral);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 992;
				Match(BooleanLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 993;
				Match(StringLiteral);
				}
				break;
			case BackTick:
				EnterOuterAlt(_localctx, 4);
				{
				State = 994;
				templateStringLiteral();
				}
				break;
			case RegularExpressionLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 995;
				Match(RegularExpressionLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 996;
				numericLiteral();
				}
				break;
			case BigHexIntegerLiteral:
			case BigOctalIntegerLiteral:
			case BigBinaryIntegerLiteral:
			case BigDecimalIntegerLiteral:
				EnterOuterAlt(_localctx, 7);
				{
				State = 997;
				bigintLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BackTick() { return GetTokens(JavaScriptParser.BackTick); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BackTick(int i) {
			return GetToken(JavaScriptParser.BackTick, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringAtomContext[] templateStringAtom() {
			return GetRuleContexts<TemplateStringAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringAtomContext templateStringAtom(int i) {
			return GetRuleContext<TemplateStringAtomContext>(i);
		}
		public TemplateStringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringLiteral(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringLiteralContext templateStringLiteral() {
		TemplateStringLiteralContext _localctx = new TemplateStringLiteralContext(Context, State);
		EnterRule(_localctx, 148, RULE_templateStringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1000;
			Match(BackTick);
			State = 1004;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TemplateStringStartExpression || _la==TemplateStringAtom) {
				{
				{
				State = 1001;
				templateStringAtom();
				}
				}
				State = 1006;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1007;
			Match(BackTick);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStringAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringAtom() { return GetToken(JavaScriptParser.TemplateStringAtom, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringStartExpression() { return GetToken(JavaScriptParser.TemplateStringStartExpression, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateCloseBrace() { return GetToken(JavaScriptParser.TemplateCloseBrace, 0); }
		public TemplateStringAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStringAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringAtom(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringAtomContext templateStringAtom() {
		TemplateStringAtomContext _localctx = new TemplateStringAtomContext(Context, State);
		EnterRule(_localctx, 150, RULE_templateStringAtom);
		try {
			State = 1014;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TemplateStringAtom:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1009;
				Match(TemplateStringAtom);
				}
				break;
			case TemplateStringStartExpression:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1010;
				Match(TemplateStringStartExpression);
				State = 1011;
				singleExpression(0);
				State = 1012;
				Match(TemplateCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalLiteral() { return GetToken(JavaScriptParser.DecimalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexIntegerLiteral() { return GetToken(JavaScriptParser.HexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral() { return GetToken(JavaScriptParser.OctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral2() { return GetToken(JavaScriptParser.OctalIntegerLiteral2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryIntegerLiteral() { return GetToken(JavaScriptParser.BinaryIntegerLiteral, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterNumericLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitNumericLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 152, RULE_numericLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1016;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 31L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BigintLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigDecimalIntegerLiteral() { return GetToken(JavaScriptParser.BigDecimalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigHexIntegerLiteral() { return GetToken(JavaScriptParser.BigHexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigOctalIntegerLiteral() { return GetToken(JavaScriptParser.BigOctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BigBinaryIntegerLiteral() { return GetToken(JavaScriptParser.BigBinaryIntegerLiteral, 0); }
		public BigintLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bigintLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBigintLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBigintLiteral(this);
		}
	}

	[RuleVersion(0)]
	public BigintLiteralContext bigintLiteral() {
		BigintLiteralContext _localctx = new BigintLiteralContext(Context, State);
		EnterRule(_localctx, 154, RULE_bigintLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1018;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementNameContext classElementName() {
			return GetRuleContext<ClassElementNameContext>(0);
		}
		public GetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitGetter(this);
		}
	}

	[RuleVersion(0)]
	public GetterContext getter() {
		GetterContext _localctx = new GetterContext(Context, State);
		EnterRule(_localctx, 156, RULE_getter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1020;
			if (!(this.n("get"))) throw new FailedPredicateException(this, "this.n(\"get\")");
			State = 1021;
			identifier();
			State = 1022;
			classElementName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementNameContext classElementName() {
			return GetRuleContext<ClassElementNameContext>(0);
		}
		public SetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSetter(this);
		}
	}

	[RuleVersion(0)]
	public SetterContext setter() {
		SetterContext _localctx = new SetterContext(Context, State);
		EnterRule(_localctx, 158, RULE_setter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1024;
			if (!(this.n("set"))) throw new FailedPredicateException(this, "this.n(\"set\")");
			State = 1025;
			identifier();
			State = 1026;
			classElementName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
		EnterRule(_localctx, 160, RULE_identifierName);
		try {
			State = 1030;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1028;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1029;
				reservedWord();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NonStrictLet() { return GetToken(JavaScriptParser.NonStrictLet, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(JavaScriptParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(JavaScriptParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Of() { return GetToken(JavaScriptParser.Of, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 162, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1032;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & 8458255L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(JavaScriptParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(JavaScriptParser.BooleanLiteral, 0); }
		public ReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterReservedWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitReservedWord(this);
		}
	}

	[RuleVersion(0)]
	public ReservedWordContext reservedWord() {
		ReservedWordContext _localctx = new ReservedWordContext(Context, State);
		EnterRule(_localctx, 164, RULE_reservedWord);
		try {
			State = 1037;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Of:
			case Yield:
			case YieldStar:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1034;
				keyword();
				}
				break;
			case NullLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1035;
				Match(NullLiteral);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1036;
				Match(BooleanLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(JavaScriptParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(JavaScriptParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(JavaScriptParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typeof() { return GetToken(JavaScriptParser.Typeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(JavaScriptParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(JavaScriptParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(JavaScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(JavaScriptParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(JavaScriptParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(JavaScriptParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(JavaScriptParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(JavaScriptParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(JavaScriptParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(JavaScriptParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(JavaScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Debugger() { return GetToken(JavaScriptParser.Debugger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(JavaScriptParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(JavaScriptParser.This, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(JavaScriptParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(JavaScriptParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(JavaScriptParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(JavaScriptParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(JavaScriptParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(JavaScriptParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(JavaScriptParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(JavaScriptParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(JavaScriptParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(JavaScriptParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(JavaScriptParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(JavaScriptParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(JavaScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(JavaScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Implements() { return GetToken(JavaScriptParser.Implements, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Let_Context let_() {
			return GetRuleContext<Let_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Private() { return GetToken(JavaScriptParser.Private, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Public() { return GetToken(JavaScriptParser.Public, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Interface() { return GetToken(JavaScriptParser.Interface, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Package() { return GetToken(JavaScriptParser.Package, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(JavaScriptParser.Protected, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(JavaScriptParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(JavaScriptParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YieldStar() { return GetToken(JavaScriptParser.YieldStar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Await() { return GetToken(JavaScriptParser.Await, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(JavaScriptParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Of() { return GetToken(JavaScriptParser.Of, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 166, RULE_keyword);
		try {
			State = 1087;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Break:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1039;
				Match(Break);
				}
				break;
			case Do:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1040;
				Match(Do);
				}
				break;
			case Instanceof:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1041;
				Match(Instanceof);
				}
				break;
			case Typeof:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1042;
				Match(Typeof);
				}
				break;
			case Case:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1043;
				Match(Case);
				}
				break;
			case Else:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1044;
				Match(Else);
				}
				break;
			case New:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1045;
				Match(New);
				}
				break;
			case Var:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1046;
				Match(Var);
				}
				break;
			case Catch:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1047;
				Match(Catch);
				}
				break;
			case Finally:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1048;
				Match(Finally);
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1049;
				Match(Return);
				}
				break;
			case Void:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1050;
				Match(Void);
				}
				break;
			case Continue:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1051;
				Match(Continue);
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1052;
				Match(For);
				}
				break;
			case Switch:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1053;
				Match(Switch);
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1054;
				Match(While);
				}
				break;
			case Debugger:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1055;
				Match(Debugger);
				}
				break;
			case Function_:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1056;
				Match(Function_);
				}
				break;
			case This:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1057;
				Match(This);
				}
				break;
			case With:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1058;
				Match(With);
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1059;
				Match(Default);
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1060;
				Match(If);
				}
				break;
			case Throw:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1061;
				Match(Throw);
				}
				break;
			case Delete:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1062;
				Match(Delete);
				}
				break;
			case In:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1063;
				Match(In);
				}
				break;
			case Try:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1064;
				Match(Try);
				}
				break;
			case Class:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1065;
				Match(Class);
				}
				break;
			case Enum:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1066;
				Match(Enum);
				}
				break;
			case Extends:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1067;
				Match(Extends);
				}
				break;
			case Super:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1068;
				Match(Super);
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1069;
				Match(Const);
				}
				break;
			case Export:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1070;
				Match(Export);
				}
				break;
			case Import:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1071;
				Match(Import);
				}
				break;
			case Implements:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1072;
				Match(Implements);
				}
				break;
			case StrictLet:
			case NonStrictLet:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1073;
				let_();
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1074;
				Match(Private);
				}
				break;
			case Public:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1075;
				Match(Public);
				}
				break;
			case Interface:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1076;
				Match(Interface);
				}
				break;
			case Package:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1077;
				Match(Package);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1078;
				Match(Protected);
				}
				break;
			case Static:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1079;
				Match(Static);
				}
				break;
			case Yield:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1080;
				Match(Yield);
				}
				break;
			case YieldStar:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1081;
				Match(YieldStar);
				}
				break;
			case Async:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1082;
				Match(Async);
				}
				break;
			case Await:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1083;
				Match(Await);
				}
				break;
			case From:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1084;
				Match(From);
				}
				break;
			case As:
				EnterOuterAlt(_localctx, 47);
				{
				State = 1085;
				Match(As);
				}
				break;
			case Of:
				EnterOuterAlt(_localctx, 48);
				{
				State = 1086;
				Match(Of);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NonStrictLet() { return GetToken(JavaScriptParser.NonStrictLet, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StrictLet() { return GetToken(JavaScriptParser.StrictLet, 0); }
		public Let_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLet_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLet_(this);
		}
	}

	[RuleVersion(0)]
	public Let_Context let_() {
		Let_Context _localctx = new Let_Context(Context, State);
		EnterRule(_localctx, 168, RULE_let_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1089;
			_la = TokenStream.LA(1);
			if ( !(_la==StrictLet || _la==NonStrictLet) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(JavaScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(JavaScriptParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 170, RULE_eos);
		try {
			State = 1095;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1091;
				Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1092;
				Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1093;
				if (!(this.lineTerminatorAhead())) throw new FailedPredicateException(this, "this.lineTerminatorAhead()");
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1094;
				if (!(this.closeBrace())) throw new FailedPredicateException(this, "this.closeBrace()");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 24: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
		case 28: return continueStatement_sempred((ContinueStatementContext)_localctx, predIndex);
		case 29: return breakStatement_sempred((BreakStatementContext)_localctx, predIndex);
		case 30: return returnStatement_sempred((ReturnStatementContext)_localctx, predIndex);
		case 31: return yieldStatement_sempred((YieldStatementContext)_localctx, predIndex);
		case 39: return throwStatement_sempred((ThrowStatementContext)_localctx, predIndex);
		case 47: return classElement_sempred((ClassElementContext)_localctx, predIndex);
		case 48: return methodDefinition_sempred((MethodDefinitionContext)_localctx, predIndex);
		case 65: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
		case 78: return getter_sempred((GetterContext)_localctx, predIndex);
		case 79: return setter_sempred((SetterContext)_localctx, predIndex);
		case 85: return eos_sempred((EosContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.notOpenBraceAndNotFunction();
		}
		return true;
	}
	private bool continueStatement_sempred(ContinueStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return this.notLineTerminator();
		}
		return true;
	}
	private bool breakStatement_sempred(BreakStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return this.notLineTerminator();
		}
		return true;
	}
	private bool returnStatement_sempred(ReturnStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return this.notLineTerminator();
		}
		return true;
	}
	private bool yieldStatement_sempred(YieldStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return this.notLineTerminator();
		}
		return true;
	}
	private bool throwStatement_sempred(ThrowStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return this.notLineTerminator();
		}
		return true;
	}
	private bool classElement_sempred(ClassElementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return this.n("static");
		case 7: return this.n("static");
		case 8: return this.n("static");
		}
		return true;
	}
	private bool methodDefinition_sempred(MethodDefinitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return this.notLineTerminator();
		}
		return true;
	}
	private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 47);
		case 11: return Precpred(Context, 27);
		case 12: return Precpred(Context, 26);
		case 13: return Precpred(Context, 25);
		case 14: return Precpred(Context, 24);
		case 15: return Precpred(Context, 23);
		case 16: return Precpred(Context, 22);
		case 17: return Precpred(Context, 21);
		case 18: return Precpred(Context, 20);
		case 19: return Precpred(Context, 19);
		case 20: return Precpred(Context, 18);
		case 21: return Precpred(Context, 17);
		case 22: return Precpred(Context, 16);
		case 23: return Precpred(Context, 15);
		case 24: return Precpred(Context, 14);
		case 25: return Precpred(Context, 13);
		case 26: return Precpred(Context, 12);
		case 27: return Precpred(Context, 11);
		case 28: return Precpred(Context, 46);
		case 29: return Precpred(Context, 45);
		case 30: return Precpred(Context, 41);
		case 31: return Precpred(Context, 39);
		case 32: return this.notLineTerminator();
		case 33: return Precpred(Context, 38);
		case 34: return this.notLineTerminator();
		case 35: return Precpred(Context, 9);
		}
		return true;
	}
	private bool getter_sempred(GetterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return this.n("get");
		}
		return true;
	}
	private bool setter_sempred(SetterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return this.n("set");
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return this.lineTerminatorAhead();
		case 39: return this.closeBrace();
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,131,1098,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,1,0,3,0,174,8,0,1,0,3,0,177,8,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
		2,203,8,2,1,3,1,3,3,3,207,8,3,1,3,1,3,1,4,4,4,212,8,4,11,4,12,4,213,1,
		5,1,5,1,5,1,6,3,6,220,8,6,1,6,1,6,3,6,224,8,6,1,6,1,6,1,6,1,6,1,6,3,6,
		231,8,6,1,7,1,7,1,7,1,7,5,7,237,8,7,10,7,12,7,240,9,7,1,7,1,7,3,7,244,
		8,7,3,7,246,8,7,1,7,1,7,1,8,1,8,1,8,3,8,253,8,8,1,9,1,9,3,9,257,8,9,1,
		10,1,10,1,11,1,11,1,11,1,12,1,12,3,12,266,8,12,1,12,1,12,3,12,270,8,12,
		1,13,1,13,1,13,1,14,1,14,1,14,3,14,278,8,14,1,15,1,15,3,15,282,8,15,1,
		15,1,15,3,15,286,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,295,8,15,
		1,16,1,16,1,16,1,16,1,16,1,16,3,16,303,8,16,1,16,1,16,3,16,307,8,16,1,
		17,1,17,1,17,1,17,5,17,313,8,17,10,17,12,17,316,9,17,1,17,1,17,3,17,320,
		8,17,3,17,322,8,17,1,17,1,17,1,18,1,18,1,18,3,18,329,8,18,1,19,1,19,1,
		19,3,19,334,8,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,5,21,343,8,21,10,21,
		12,21,346,9,21,1,22,1,22,1,22,3,22,351,8,22,1,23,1,23,1,24,1,24,1,24,1,
		24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,366,8,25,1,26,1,26,1,26,1,26,
		1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
		3,26,386,8,26,1,26,1,26,3,26,390,8,26,1,26,1,26,3,26,394,8,26,1,26,1,26,
		1,26,1,26,1,26,1,26,3,26,402,8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,
		26,411,8,26,1,26,1,26,1,26,3,26,416,8,26,1,26,1,26,1,26,1,26,1,26,3,26,
		423,8,26,1,27,1,27,1,27,3,27,428,8,27,1,28,1,28,1,28,3,28,433,8,28,1,28,
		1,28,1,29,1,29,1,29,3,29,440,8,29,1,29,1,29,1,30,1,30,1,30,3,30,447,8,
		30,1,30,1,30,1,31,1,31,1,31,3,31,454,8,31,1,31,1,31,1,32,1,32,1,32,1,32,
		1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,3,34,472,8,34,1,34,1,
		34,3,34,476,8,34,3,34,478,8,34,1,34,1,34,1,35,4,35,483,8,35,11,35,12,35,
		484,1,36,1,36,1,36,1,36,3,36,491,8,36,1,37,1,37,1,37,3,37,496,8,37,1,38,
		1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,3,40,511,8,
		40,1,40,3,40,514,8,40,1,41,1,41,1,41,3,41,519,8,41,1,41,3,41,522,8,41,
		1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,3,44,533,8,44,1,44,1,44,3,
		44,537,8,44,1,44,1,44,1,44,3,44,542,8,44,1,44,1,44,1,44,1,45,1,45,1,45,
		1,45,1,46,1,46,3,46,553,8,46,1,46,1,46,5,46,557,8,46,10,46,12,46,560,9,
		46,1,46,1,46,1,47,1,47,1,47,3,47,567,8,47,1,47,1,47,1,47,1,47,3,47,573,
		8,47,1,47,1,47,1,47,1,47,3,47,579,8,47,1,47,1,47,3,47,583,8,47,1,48,1,
		48,3,48,587,8,48,1,48,3,48,590,8,48,1,48,1,48,1,48,3,48,595,8,48,1,48,
		1,48,1,48,1,48,3,48,601,8,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,609,8,
		48,1,48,1,48,1,48,3,48,614,8,48,1,48,1,48,1,48,3,48,619,8,48,1,49,1,49,
		3,49,623,8,49,1,50,1,50,3,50,627,8,50,1,51,1,51,1,51,1,52,1,52,1,52,5,
		52,635,8,52,10,52,12,52,638,9,52,1,52,1,52,3,52,642,8,52,1,52,3,52,645,
		8,52,1,53,1,53,1,53,3,53,650,8,53,1,54,1,54,1,54,1,55,1,55,3,55,657,8,
		55,1,55,1,55,1,56,4,56,662,8,56,11,56,12,56,663,1,57,1,57,1,57,1,57,1,
		58,5,58,671,8,58,10,58,12,58,674,9,58,1,58,3,58,677,8,58,1,58,4,58,680,
		8,58,11,58,12,58,681,1,58,5,58,685,8,58,10,58,12,58,688,9,58,1,58,5,58,
		691,8,58,10,58,12,58,694,9,58,1,59,3,59,697,8,59,1,59,1,59,1,60,1,60,1,
		60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,712,8,60,1,60,3,60,715,
		8,60,1,60,1,60,1,60,3,60,720,8,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,
		60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,737,8,60,1,60,3,60,740,8,60,
		1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,749,8,61,1,62,1,62,1,62,1,62,5,
		62,755,8,62,10,62,12,62,758,9,62,1,62,3,62,761,8,62,3,62,763,8,62,1,62,
		1,62,1,63,3,63,768,8,63,1,63,1,63,3,63,772,8,63,1,64,1,64,1,64,5,64,777,
		8,64,10,64,12,64,780,9,64,1,65,1,65,1,65,1,65,3,65,786,8,65,1,65,1,65,
		1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
		1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
		1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
		1,65,1,65,1,65,1,65,1,65,1,65,3,65,838,8,65,1,65,1,65,1,65,1,65,1,65,1,
		65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
		65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
		65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
		65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,900,
		8,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,908,8,65,1,65,1,65,3,65,912,8,
		65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,5,65,925,8,65,
		10,65,12,65,928,9,65,1,66,1,66,1,66,1,67,1,67,1,67,1,67,3,67,937,8,67,
		1,68,1,68,1,68,1,68,5,68,943,8,68,10,68,12,68,946,9,68,1,68,3,68,949,8,
		68,3,68,951,8,68,1,68,1,68,1,69,1,69,3,69,957,8,69,1,69,1,69,3,69,961,
		8,69,1,69,1,69,3,69,965,8,69,1,69,1,69,1,69,3,69,970,8,69,1,69,1,69,1,
		69,1,69,3,69,976,8,69,1,70,1,70,1,70,3,70,981,8,70,1,70,3,70,984,8,70,
		1,71,1,71,3,71,988,8,71,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,
		73,999,8,73,1,74,1,74,5,74,1003,8,74,10,74,12,74,1006,9,74,1,74,1,74,1,
		75,1,75,1,75,1,75,1,75,3,75,1015,8,75,1,76,1,76,1,77,1,77,1,78,1,78,1,
		78,1,78,1,79,1,79,1,79,1,79,1,80,1,80,3,80,1031,8,80,1,81,1,81,1,82,1,
		82,1,82,3,82,1038,8,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
		83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
		83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
		83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1088,8,83,1,
		84,1,84,1,85,1,85,1,85,1,85,3,85,1096,8,85,1,85,0,1,130,86,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
		60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
		106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
		142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,0,12,3,0,102,
		102,112,112,122,122,1,0,102,103,1,0,26,28,1,0,22,23,1,0,32,34,1,0,35,38,
		1,0,39,42,1,0,48,60,1,0,64,68,1,0,69,72,4,0,99,102,111,111,115,115,122,
		122,1,0,114,115,1267,0,173,1,0,0,0,2,180,1,0,0,0,4,202,1,0,0,0,6,204,1,
		0,0,0,8,211,1,0,0,0,10,215,1,0,0,0,12,230,1,0,0,0,14,232,1,0,0,0,16,249,
		1,0,0,0,18,256,1,0,0,0,20,258,1,0,0,0,22,260,1,0,0,0,24,265,1,0,0,0,26,
		271,1,0,0,0,28,274,1,0,0,0,30,294,1,0,0,0,32,306,1,0,0,0,34,308,1,0,0,
		0,36,325,1,0,0,0,38,333,1,0,0,0,40,335,1,0,0,0,42,338,1,0,0,0,44,347,1,
		0,0,0,46,352,1,0,0,0,48,354,1,0,0,0,50,358,1,0,0,0,52,422,1,0,0,0,54,427,
		1,0,0,0,56,429,1,0,0,0,58,436,1,0,0,0,60,443,1,0,0,0,62,450,1,0,0,0,64,
		457,1,0,0,0,66,463,1,0,0,0,68,469,1,0,0,0,70,482,1,0,0,0,72,486,1,0,0,
		0,74,492,1,0,0,0,76,497,1,0,0,0,78,501,1,0,0,0,80,506,1,0,0,0,82,515,1,
		0,0,0,84,525,1,0,0,0,86,528,1,0,0,0,88,532,1,0,0,0,90,546,1,0,0,0,92,552,
		1,0,0,0,94,582,1,0,0,0,96,618,1,0,0,0,98,620,1,0,0,0,100,626,1,0,0,0,102,
		628,1,0,0,0,104,644,1,0,0,0,106,646,1,0,0,0,108,651,1,0,0,0,110,654,1,
		0,0,0,112,661,1,0,0,0,114,665,1,0,0,0,116,672,1,0,0,0,118,696,1,0,0,0,
		120,739,1,0,0,0,122,748,1,0,0,0,124,750,1,0,0,0,126,767,1,0,0,0,128,773,
		1,0,0,0,130,837,1,0,0,0,132,929,1,0,0,0,134,936,1,0,0,0,136,938,1,0,0,
		0,138,975,1,0,0,0,140,983,1,0,0,0,142,987,1,0,0,0,144,989,1,0,0,0,146,
		998,1,0,0,0,148,1000,1,0,0,0,150,1014,1,0,0,0,152,1016,1,0,0,0,154,1018,
		1,0,0,0,156,1020,1,0,0,0,158,1024,1,0,0,0,160,1030,1,0,0,0,162,1032,1,
		0,0,0,164,1037,1,0,0,0,166,1087,1,0,0,0,168,1089,1,0,0,0,170,1095,1,0,
		0,0,172,174,5,1,0,0,173,172,1,0,0,0,173,174,1,0,0,0,174,176,1,0,0,0,175,
		177,3,112,56,0,176,175,1,0,0,0,176,177,1,0,0,0,177,178,1,0,0,0,178,179,
		5,0,0,1,179,1,1,0,0,0,180,181,3,4,2,0,181,3,1,0,0,0,182,203,3,6,3,0,183,
		203,3,40,20,0,184,203,3,10,5,0,185,203,3,30,15,0,186,203,3,46,23,0,187,
		203,3,90,45,0,188,203,3,88,44,0,189,203,3,48,24,0,190,203,3,50,25,0,191,
		203,3,52,26,0,192,203,3,56,28,0,193,203,3,58,29,0,194,203,3,60,30,0,195,
		203,3,62,31,0,196,203,3,64,32,0,197,203,3,76,38,0,198,203,3,66,33,0,199,
		203,3,78,39,0,200,203,3,80,40,0,201,203,3,86,43,0,202,182,1,0,0,0,202,
		183,1,0,0,0,202,184,1,0,0,0,202,185,1,0,0,0,202,186,1,0,0,0,202,187,1,
		0,0,0,202,188,1,0,0,0,202,189,1,0,0,0,202,190,1,0,0,0,202,191,1,0,0,0,
		202,192,1,0,0,0,202,193,1,0,0,0,202,194,1,0,0,0,202,195,1,0,0,0,202,196,
		1,0,0,0,202,197,1,0,0,0,202,198,1,0,0,0,202,199,1,0,0,0,202,200,1,0,0,
		0,202,201,1,0,0,0,203,5,1,0,0,0,204,206,5,9,0,0,205,207,3,8,4,0,206,205,
		1,0,0,0,206,207,1,0,0,0,207,208,1,0,0,0,208,209,5,11,0,0,209,7,1,0,0,0,
		210,212,3,4,2,0,211,210,1,0,0,0,212,213,1,0,0,0,213,211,1,0,0,0,213,214,
		1,0,0,0,214,9,1,0,0,0,215,216,5,110,0,0,216,217,3,12,6,0,217,11,1,0,0,
		0,218,220,3,22,11,0,219,218,1,0,0,0,219,220,1,0,0,0,220,223,1,0,0,0,221,
		224,3,24,12,0,222,224,3,14,7,0,223,221,1,0,0,0,223,222,1,0,0,0,224,225,
		1,0,0,0,225,226,3,26,13,0,226,227,3,170,85,0,227,231,1,0,0,0,228,229,5,
		123,0,0,229,231,3,170,85,0,230,219,1,0,0,0,230,228,1,0,0,0,231,13,1,0,
		0,0,232,238,5,9,0,0,233,234,3,16,8,0,234,235,5,13,0,0,235,237,1,0,0,0,
		236,233,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,245,
		1,0,0,0,240,238,1,0,0,0,241,243,3,16,8,0,242,244,5,13,0,0,243,242,1,0,
		0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,241,1,0,0,0,245,246,1,0,0,0,246,
		247,1,0,0,0,247,248,5,11,0,0,248,15,1,0,0,0,249,252,3,18,9,0,250,251,5,
		99,0,0,251,253,3,20,10,0,252,250,1,0,0,0,252,253,1,0,0,0,253,17,1,0,0,
		0,254,257,3,160,80,0,255,257,5,123,0,0,256,254,1,0,0,0,256,255,1,0,0,0,
		257,19,1,0,0,0,258,259,7,0,0,0,259,21,1,0,0,0,260,261,3,28,14,0,261,262,
		5,13,0,0,262,23,1,0,0,0,263,266,5,26,0,0,264,266,3,160,80,0,265,263,1,
		0,0,0,265,264,1,0,0,0,266,269,1,0,0,0,267,268,5,99,0,0,268,270,3,160,80,
		0,269,267,1,0,0,0,269,270,1,0,0,0,270,25,1,0,0,0,271,272,5,100,0,0,272,
		273,5,123,0,0,273,27,1,0,0,0,274,277,3,160,80,0,275,276,5,99,0,0,276,278,
		3,160,80,0,277,275,1,0,0,0,277,278,1,0,0,0,278,29,1,0,0,0,279,281,5,109,
		0,0,280,282,5,93,0,0,281,280,1,0,0,0,281,282,1,0,0,0,282,285,1,0,0,0,283,
		286,3,32,16,0,284,286,3,38,19,0,285,283,1,0,0,0,285,284,1,0,0,0,286,287,
		1,0,0,0,287,288,3,170,85,0,288,295,1,0,0,0,289,290,5,109,0,0,290,291,5,
		93,0,0,291,292,3,130,65,0,292,293,3,170,85,0,293,295,1,0,0,0,294,279,1,
		0,0,0,294,289,1,0,0,0,295,31,1,0,0,0,296,297,3,24,12,0,297,298,3,26,13,
		0,298,299,3,170,85,0,299,307,1,0,0,0,300,302,3,34,17,0,301,303,3,26,13,
		0,302,301,1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,304,305,3,170,85,0,305,
		307,1,0,0,0,306,296,1,0,0,0,306,300,1,0,0,0,307,33,1,0,0,0,308,314,5,9,
		0,0,309,310,3,36,18,0,310,311,5,13,0,0,311,313,1,0,0,0,312,309,1,0,0,0,
		313,316,1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,321,1,0,0,0,316,314,
		1,0,0,0,317,319,3,36,18,0,318,320,5,13,0,0,319,318,1,0,0,0,319,320,1,0,
		0,0,320,322,1,0,0,0,321,317,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,
		324,5,11,0,0,324,35,1,0,0,0,325,328,3,18,9,0,326,327,5,99,0,0,327,329,
		3,18,9,0,328,326,1,0,0,0,328,329,1,0,0,0,329,37,1,0,0,0,330,334,3,40,20,
		0,331,334,3,90,45,0,332,334,3,88,44,0,333,330,1,0,0,0,333,331,1,0,0,0,
		333,332,1,0,0,0,334,39,1,0,0,0,335,336,3,42,21,0,336,337,3,170,85,0,337,
		41,1,0,0,0,338,339,3,54,27,0,339,344,3,44,22,0,340,341,5,13,0,0,341,343,
		3,44,22,0,342,340,1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,345,1,0,
		0,0,345,43,1,0,0,0,346,344,1,0,0,0,347,350,3,134,67,0,348,349,5,14,0,0,
		349,351,3,130,65,0,350,348,1,0,0,0,350,351,1,0,0,0,351,45,1,0,0,0,352,
		353,5,12,0,0,353,47,1,0,0,0,354,355,4,24,0,0,355,356,3,128,64,0,356,357,
		3,170,85,0,357,49,1,0,0,0,358,359,5,94,0,0,359,360,5,7,0,0,360,361,3,128,
		64,0,361,362,5,8,0,0,362,365,3,4,2,0,363,364,5,78,0,0,364,366,3,4,2,0,
		365,363,1,0,0,0,365,366,1,0,0,0,366,51,1,0,0,0,367,368,5,74,0,0,368,369,
		3,4,2,0,369,370,5,88,0,0,370,371,5,7,0,0,371,372,3,128,64,0,372,373,5,
		8,0,0,373,374,3,170,85,0,374,423,1,0,0,0,375,376,5,88,0,0,376,377,5,7,
		0,0,377,378,3,128,64,0,378,379,5,8,0,0,379,380,3,4,2,0,380,423,1,0,0,0,
		381,382,5,86,0,0,382,385,5,7,0,0,383,386,3,128,64,0,384,386,3,42,21,0,
		385,383,1,0,0,0,385,384,1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,387,389,
		5,12,0,0,388,390,3,128,64,0,389,388,1,0,0,0,389,390,1,0,0,0,390,391,1,
		0,0,0,391,393,5,12,0,0,392,394,3,128,64,0,393,392,1,0,0,0,393,394,1,0,
		0,0,394,395,1,0,0,0,395,396,5,8,0,0,396,423,3,4,2,0,397,398,5,86,0,0,398,
		401,5,7,0,0,399,402,3,130,65,0,400,402,3,42,21,0,401,399,1,0,0,0,401,400,
		1,0,0,0,402,403,1,0,0,0,403,404,5,97,0,0,404,405,3,128,64,0,405,406,5,
		8,0,0,406,407,3,4,2,0,407,423,1,0,0,0,408,410,5,86,0,0,409,411,5,112,0,
		0,410,409,1,0,0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,415,5,7,0,0,413,
		416,3,130,65,0,414,416,3,42,21,0,415,413,1,0,0,0,415,414,1,0,0,0,416,417,
		1,0,0,0,417,418,5,101,0,0,418,419,3,128,64,0,419,420,5,8,0,0,420,421,3,
		4,2,0,421,423,1,0,0,0,422,367,1,0,0,0,422,375,1,0,0,0,422,381,1,0,0,0,
		422,397,1,0,0,0,422,408,1,0,0,0,423,53,1,0,0,0,424,428,5,80,0,0,425,428,
		3,168,84,0,426,428,5,108,0,0,427,424,1,0,0,0,427,425,1,0,0,0,427,426,1,
		0,0,0,428,55,1,0,0,0,429,432,5,85,0,0,430,431,4,28,1,0,431,433,3,162,81,
		0,432,430,1,0,0,0,432,433,1,0,0,0,433,434,1,0,0,0,434,435,3,170,85,0,435,
		57,1,0,0,0,436,439,5,73,0,0,437,438,4,29,2,0,438,440,3,162,81,0,439,437,
		1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,441,442,3,170,85,0,442,59,1,0,
		0,0,443,446,5,83,0,0,444,445,4,30,3,0,445,447,3,128,64,0,446,444,1,0,0,
		0,446,447,1,0,0,0,447,448,1,0,0,0,448,449,3,170,85,0,449,61,1,0,0,0,450,
		453,7,1,0,0,451,452,4,31,4,0,452,454,3,128,64,0,453,451,1,0,0,0,453,454,
		1,0,0,0,454,455,1,0,0,0,455,456,3,170,85,0,456,63,1,0,0,0,457,458,5,92,
		0,0,458,459,5,7,0,0,459,460,3,128,64,0,460,461,5,8,0,0,461,462,3,4,2,0,
		462,65,1,0,0,0,463,464,5,87,0,0,464,465,5,7,0,0,465,466,3,128,64,0,466,
		467,5,8,0,0,467,468,3,68,34,0,468,67,1,0,0,0,469,471,5,9,0,0,470,472,3,
		70,35,0,471,470,1,0,0,0,471,472,1,0,0,0,472,477,1,0,0,0,473,475,3,74,37,
		0,474,476,3,70,35,0,475,474,1,0,0,0,475,476,1,0,0,0,476,478,1,0,0,0,477,
		473,1,0,0,0,477,478,1,0,0,0,478,479,1,0,0,0,479,480,5,11,0,0,480,69,1,
		0,0,0,481,483,3,72,36,0,482,481,1,0,0,0,483,484,1,0,0,0,484,482,1,0,0,
		0,484,485,1,0,0,0,485,71,1,0,0,0,486,487,5,77,0,0,487,488,3,128,64,0,488,
		490,5,17,0,0,489,491,3,8,4,0,490,489,1,0,0,0,490,491,1,0,0,0,491,73,1,
		0,0,0,492,493,5,93,0,0,493,495,5,17,0,0,494,496,3,8,4,0,495,494,1,0,0,
		0,495,496,1,0,0,0,496,75,1,0,0,0,497,498,3,162,81,0,498,499,5,17,0,0,499,
		500,3,4,2,0,500,77,1,0,0,0,501,502,5,95,0,0,502,503,4,39,5,0,503,504,3,
		128,64,0,504,505,3,170,85,0,505,79,1,0,0,0,506,507,5,98,0,0,507,513,3,
		6,3,0,508,510,3,82,41,0,509,511,3,84,42,0,510,509,1,0,0,0,510,511,1,0,
		0,0,511,514,1,0,0,0,512,514,3,84,42,0,513,508,1,0,0,0,513,512,1,0,0,0,
		514,81,1,0,0,0,515,521,5,81,0,0,516,518,5,7,0,0,517,519,3,134,67,0,518,
		517,1,0,0,0,518,519,1,0,0,0,519,520,1,0,0,0,520,522,5,8,0,0,521,516,1,
		0,0,0,521,522,1,0,0,0,522,523,1,0,0,0,523,524,3,6,3,0,524,83,1,0,0,0,525,
		526,5,82,0,0,526,527,3,6,3,0,527,85,1,0,0,0,528,529,5,89,0,0,529,530,3,
		170,85,0,530,87,1,0,0,0,531,533,5,111,0,0,532,531,1,0,0,0,532,533,1,0,
		0,0,533,534,1,0,0,0,534,536,5,90,0,0,535,537,5,26,0,0,536,535,1,0,0,0,
		536,537,1,0,0,0,537,538,1,0,0,0,538,539,3,162,81,0,539,541,5,7,0,0,540,
		542,3,104,52,0,541,540,1,0,0,0,541,542,1,0,0,0,542,543,1,0,0,0,543,544,
		5,8,0,0,544,545,3,110,55,0,545,89,1,0,0,0,546,547,5,104,0,0,547,548,3,
		162,81,0,548,549,3,92,46,0,549,91,1,0,0,0,550,551,5,106,0,0,551,553,3,
		130,65,0,552,550,1,0,0,0,552,553,1,0,0,0,553,554,1,0,0,0,554,558,5,9,0,
		0,555,557,3,94,47,0,556,555,1,0,0,0,557,560,1,0,0,0,558,556,1,0,0,0,558,
		559,1,0,0,0,559,561,1,0,0,0,560,558,1,0,0,0,561,562,5,11,0,0,562,93,1,
		0,0,0,563,567,5,121,0,0,564,565,4,47,6,0,565,567,3,162,81,0,566,563,1,
		0,0,0,566,564,1,0,0,0,566,567,1,0,0,0,567,568,1,0,0,0,568,583,3,96,48,
		0,569,573,5,121,0,0,570,571,4,47,7,0,571,573,3,162,81,0,572,569,1,0,0,
		0,572,570,1,0,0,0,572,573,1,0,0,0,573,574,1,0,0,0,574,583,3,98,49,0,575,
		579,5,121,0,0,576,577,4,47,8,0,577,579,3,162,81,0,578,575,1,0,0,0,578,
		576,1,0,0,0,579,580,1,0,0,0,580,583,3,6,3,0,581,583,3,46,23,0,582,566,
		1,0,0,0,582,572,1,0,0,0,582,578,1,0,0,0,582,581,1,0,0,0,583,95,1,0,0,0,
		584,585,5,111,0,0,585,587,4,48,9,0,586,584,1,0,0,0,586,587,1,0,0,0,587,
		589,1,0,0,0,588,590,5,26,0,0,589,588,1,0,0,0,589,590,1,0,0,0,590,591,1,
		0,0,0,591,592,3,100,50,0,592,594,5,7,0,0,593,595,3,104,52,0,594,593,1,
		0,0,0,594,595,1,0,0,0,595,596,1,0,0,0,596,597,5,8,0,0,597,598,3,110,55,
		0,598,619,1,0,0,0,599,601,5,26,0,0,600,599,1,0,0,0,600,601,1,0,0,0,601,
		602,1,0,0,0,602,603,3,156,78,0,603,604,5,7,0,0,604,605,5,8,0,0,605,606,
		3,110,55,0,606,619,1,0,0,0,607,609,5,26,0,0,608,607,1,0,0,0,608,609,1,
		0,0,0,609,610,1,0,0,0,610,611,3,158,79,0,611,613,5,7,0,0,612,614,3,104,
		52,0,613,612,1,0,0,0,613,614,1,0,0,0,614,615,1,0,0,0,615,616,5,8,0,0,616,
		617,3,110,55,0,617,619,1,0,0,0,618,586,1,0,0,0,618,600,1,0,0,0,618,608,
		1,0,0,0,619,97,1,0,0,0,620,622,3,100,50,0,621,623,3,132,66,0,622,621,1,
		0,0,0,622,623,1,0,0,0,623,99,1,0,0,0,624,627,3,122,61,0,625,627,3,102,
		51,0,626,624,1,0,0,0,626,625,1,0,0,0,627,101,1,0,0,0,628,629,5,31,0,0,
		629,630,3,160,80,0,630,103,1,0,0,0,631,636,3,106,53,0,632,633,5,13,0,0,
		633,635,3,106,53,0,634,632,1,0,0,0,635,638,1,0,0,0,636,634,1,0,0,0,636,
		637,1,0,0,0,637,641,1,0,0,0,638,636,1,0,0,0,639,640,5,13,0,0,640,642,3,
		108,54,0,641,639,1,0,0,0,641,642,1,0,0,0,642,645,1,0,0,0,643,645,3,108,
		54,0,644,631,1,0,0,0,644,643,1,0,0,0,645,105,1,0,0,0,646,649,3,134,67,
		0,647,648,5,14,0,0,648,650,3,130,65,0,649,647,1,0,0,0,649,650,1,0,0,0,
		650,107,1,0,0,0,651,652,5,18,0,0,652,653,3,130,65,0,653,109,1,0,0,0,654,
		656,5,9,0,0,655,657,3,112,56,0,656,655,1,0,0,0,656,657,1,0,0,0,657,658,
		1,0,0,0,658,659,5,11,0,0,659,111,1,0,0,0,660,662,3,2,1,0,661,660,1,0,0,
		0,662,663,1,0,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,113,1,0,0,0,665,
		666,5,5,0,0,666,667,3,116,58,0,667,668,5,6,0,0,668,115,1,0,0,0,669,671,
		5,13,0,0,670,669,1,0,0,0,671,674,1,0,0,0,672,670,1,0,0,0,672,673,1,0,0,
		0,673,676,1,0,0,0,674,672,1,0,0,0,675,677,3,118,59,0,676,675,1,0,0,0,676,
		677,1,0,0,0,677,686,1,0,0,0,678,680,5,13,0,0,679,678,1,0,0,0,680,681,1,
		0,0,0,681,679,1,0,0,0,681,682,1,0,0,0,682,683,1,0,0,0,683,685,3,118,59,
		0,684,679,1,0,0,0,685,688,1,0,0,0,686,684,1,0,0,0,686,687,1,0,0,0,687,
		692,1,0,0,0,688,686,1,0,0,0,689,691,5,13,0,0,690,689,1,0,0,0,691,694,1,
		0,0,0,692,690,1,0,0,0,692,693,1,0,0,0,693,117,1,0,0,0,694,692,1,0,0,0,
		695,697,5,18,0,0,696,695,1,0,0,0,696,697,1,0,0,0,697,698,1,0,0,0,698,699,
		3,130,65,0,699,119,1,0,0,0,700,701,3,122,61,0,701,702,5,17,0,0,702,703,
		3,130,65,0,703,740,1,0,0,0,704,705,5,5,0,0,705,706,3,130,65,0,706,707,
		5,6,0,0,707,708,5,17,0,0,708,709,3,130,65,0,709,740,1,0,0,0,710,712,5,
		111,0,0,711,710,1,0,0,0,711,712,1,0,0,0,712,714,1,0,0,0,713,715,5,26,0,
		0,714,713,1,0,0,0,714,715,1,0,0,0,715,716,1,0,0,0,716,717,3,122,61,0,717,
		719,5,7,0,0,718,720,3,104,52,0,719,718,1,0,0,0,719,720,1,0,0,0,720,721,
		1,0,0,0,721,722,5,8,0,0,722,723,3,110,55,0,723,740,1,0,0,0,724,725,3,156,
		78,0,725,726,5,7,0,0,726,727,5,8,0,0,727,728,3,110,55,0,728,740,1,0,0,
		0,729,730,3,158,79,0,730,731,5,7,0,0,731,732,3,106,53,0,732,733,5,8,0,
		0,733,734,3,110,55,0,734,740,1,0,0,0,735,737,5,18,0,0,736,735,1,0,0,0,
		736,737,1,0,0,0,737,738,1,0,0,0,738,740,3,130,65,0,739,700,1,0,0,0,739,
		704,1,0,0,0,739,711,1,0,0,0,739,724,1,0,0,0,739,729,1,0,0,0,739,736,1,
		0,0,0,740,121,1,0,0,0,741,749,3,160,80,0,742,749,5,123,0,0,743,749,3,152,
		76,0,744,745,5,5,0,0,745,746,3,130,65,0,746,747,5,6,0,0,747,749,1,0,0,
		0,748,741,1,0,0,0,748,742,1,0,0,0,748,743,1,0,0,0,748,744,1,0,0,0,749,
		123,1,0,0,0,750,762,5,7,0,0,751,756,3,126,63,0,752,753,5,13,0,0,753,755,
		3,126,63,0,754,752,1,0,0,0,755,758,1,0,0,0,756,754,1,0,0,0,756,757,1,0,
		0,0,757,760,1,0,0,0,758,756,1,0,0,0,759,761,5,13,0,0,760,759,1,0,0,0,760,
		761,1,0,0,0,761,763,1,0,0,0,762,751,1,0,0,0,762,763,1,0,0,0,763,764,1,
		0,0,0,764,765,5,8,0,0,765,125,1,0,0,0,766,768,5,18,0,0,767,766,1,0,0,0,
		767,768,1,0,0,0,768,771,1,0,0,0,769,772,3,130,65,0,770,772,3,162,81,0,
		771,769,1,0,0,0,771,770,1,0,0,0,772,127,1,0,0,0,773,778,3,130,65,0,774,
		775,5,13,0,0,775,777,3,130,65,0,776,774,1,0,0,0,777,780,1,0,0,0,778,776,
		1,0,0,0,778,779,1,0,0,0,779,129,1,0,0,0,780,778,1,0,0,0,781,782,6,65,-1,
		0,782,838,3,138,69,0,783,785,5,104,0,0,784,786,3,162,81,0,785,784,1,0,
		0,0,785,786,1,0,0,0,786,787,1,0,0,0,787,838,3,92,46,0,788,789,5,79,0,0,
		789,790,3,162,81,0,790,791,3,124,62,0,791,838,1,0,0,0,792,793,5,79,0,0,
		793,794,3,130,65,0,794,795,3,124,62,0,795,838,1,0,0,0,796,797,5,79,0,0,
		797,838,3,130,65,42,798,799,5,79,0,0,799,800,5,19,0,0,800,838,3,162,81,
		0,801,802,5,96,0,0,802,838,3,130,65,37,803,804,5,84,0,0,804,838,3,130,
		65,36,805,806,5,76,0,0,806,838,3,130,65,35,807,808,5,20,0,0,808,838,3,
		130,65,34,809,810,5,21,0,0,810,838,3,130,65,33,811,812,5,22,0,0,812,838,
		3,130,65,32,813,814,5,23,0,0,814,838,3,130,65,31,815,816,5,24,0,0,816,
		838,3,130,65,30,817,818,5,25,0,0,818,838,3,130,65,29,819,820,5,112,0,0,
		820,838,3,130,65,28,821,822,5,110,0,0,822,823,5,7,0,0,823,824,3,130,65,
		0,824,825,5,8,0,0,825,838,1,0,0,0,826,838,3,62,31,0,827,838,5,91,0,0,828,
		838,3,162,81,0,829,838,5,107,0,0,830,838,3,146,73,0,831,838,3,114,57,0,
		832,838,3,136,68,0,833,834,5,7,0,0,834,835,3,128,64,0,835,836,5,8,0,0,
		836,838,1,0,0,0,837,781,1,0,0,0,837,783,1,0,0,0,837,788,1,0,0,0,837,792,
		1,0,0,0,837,796,1,0,0,0,837,798,1,0,0,0,837,801,1,0,0,0,837,803,1,0,0,
		0,837,805,1,0,0,0,837,807,1,0,0,0,837,809,1,0,0,0,837,811,1,0,0,0,837,
		813,1,0,0,0,837,815,1,0,0,0,837,817,1,0,0,0,837,819,1,0,0,0,837,821,1,
		0,0,0,837,826,1,0,0,0,837,827,1,0,0,0,837,828,1,0,0,0,837,829,1,0,0,0,
		837,830,1,0,0,0,837,831,1,0,0,0,837,832,1,0,0,0,837,833,1,0,0,0,838,926,
		1,0,0,0,839,840,10,47,0,0,840,841,5,16,0,0,841,925,3,130,65,48,842,843,
		10,27,0,0,843,844,5,29,0,0,844,925,3,130,65,27,845,846,10,26,0,0,846,847,
		7,2,0,0,847,925,3,130,65,27,848,849,10,25,0,0,849,850,7,3,0,0,850,925,
		3,130,65,26,851,852,10,24,0,0,852,853,5,30,0,0,853,925,3,130,65,25,854,
		855,10,23,0,0,855,856,7,4,0,0,856,925,3,130,65,24,857,858,10,22,0,0,858,
		859,7,5,0,0,859,925,3,130,65,23,860,861,10,21,0,0,861,862,5,75,0,0,862,
		925,3,130,65,22,863,864,10,20,0,0,864,865,5,97,0,0,865,925,3,130,65,21,
		866,867,10,19,0,0,867,868,7,6,0,0,868,925,3,130,65,20,869,870,10,18,0,
		0,870,871,5,43,0,0,871,925,3,130,65,19,872,873,10,17,0,0,873,874,5,44,
		0,0,874,925,3,130,65,18,875,876,10,16,0,0,876,877,5,45,0,0,877,925,3,130,
		65,17,878,879,10,15,0,0,879,880,5,46,0,0,880,925,3,130,65,16,881,882,10,
		14,0,0,882,883,5,47,0,0,883,925,3,130,65,15,884,885,10,13,0,0,885,886,
		5,15,0,0,886,887,3,130,65,0,887,888,5,17,0,0,888,889,3,130,65,14,889,925,
		1,0,0,0,890,891,10,12,0,0,891,892,5,14,0,0,892,925,3,130,65,12,893,894,
		10,11,0,0,894,895,3,144,72,0,895,896,3,130,65,11,896,925,1,0,0,0,897,899,
		10,46,0,0,898,900,5,16,0,0,899,898,1,0,0,0,899,900,1,0,0,0,900,901,1,0,
		0,0,901,902,5,5,0,0,902,903,3,128,64,0,903,904,5,6,0,0,904,925,1,0,0,0,
		905,907,10,45,0,0,906,908,5,15,0,0,907,906,1,0,0,0,907,908,1,0,0,0,908,
		909,1,0,0,0,909,911,5,19,0,0,910,912,5,31,0,0,911,910,1,0,0,0,911,912,
		1,0,0,0,912,913,1,0,0,0,913,925,3,160,80,0,914,915,10,41,0,0,915,925,3,
		124,62,0,916,917,10,39,0,0,917,918,4,65,32,0,918,925,5,20,0,0,919,920,
		10,38,0,0,920,921,4,65,34,0,921,925,5,21,0,0,922,923,10,9,0,0,923,925,
		3,148,74,0,924,839,1,0,0,0,924,842,1,0,0,0,924,845,1,0,0,0,924,848,1,0,
		0,0,924,851,1,0,0,0,924,854,1,0,0,0,924,857,1,0,0,0,924,860,1,0,0,0,924,
		863,1,0,0,0,924,866,1,0,0,0,924,869,1,0,0,0,924,872,1,0,0,0,924,875,1,
		0,0,0,924,878,1,0,0,0,924,881,1,0,0,0,924,884,1,0,0,0,924,890,1,0,0,0,
		924,893,1,0,0,0,924,897,1,0,0,0,924,905,1,0,0,0,924,914,1,0,0,0,924,916,
		1,0,0,0,924,919,1,0,0,0,924,922,1,0,0,0,925,928,1,0,0,0,926,924,1,0,0,
		0,926,927,1,0,0,0,927,131,1,0,0,0,928,926,1,0,0,0,929,930,5,14,0,0,930,
		931,3,130,65,0,931,133,1,0,0,0,932,937,3,162,81,0,933,937,3,166,83,0,934,
		937,3,114,57,0,935,937,3,136,68,0,936,932,1,0,0,0,936,933,1,0,0,0,936,
		934,1,0,0,0,936,935,1,0,0,0,937,135,1,0,0,0,938,950,5,9,0,0,939,944,3,
		120,60,0,940,941,5,13,0,0,941,943,3,120,60,0,942,940,1,0,0,0,943,946,1,
		0,0,0,944,942,1,0,0,0,944,945,1,0,0,0,945,948,1,0,0,0,946,944,1,0,0,0,
		947,949,5,13,0,0,948,947,1,0,0,0,948,949,1,0,0,0,949,951,1,0,0,0,950,939,
		1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,0,952,953,5,11,0,0,953,137,1,0,0,
		0,954,976,3,88,44,0,955,957,5,111,0,0,956,955,1,0,0,0,956,957,1,0,0,0,
		957,958,1,0,0,0,958,960,5,90,0,0,959,961,5,26,0,0,960,959,1,0,0,0,960,
		961,1,0,0,0,961,962,1,0,0,0,962,964,5,7,0,0,963,965,3,104,52,0,964,963,
		1,0,0,0,964,965,1,0,0,0,965,966,1,0,0,0,966,967,5,8,0,0,967,976,3,110,
		55,0,968,970,5,111,0,0,969,968,1,0,0,0,969,970,1,0,0,0,970,971,1,0,0,0,
		971,972,3,140,70,0,972,973,5,61,0,0,973,974,3,142,71,0,974,976,1,0,0,0,
		975,954,1,0,0,0,975,956,1,0,0,0,975,969,1,0,0,0,976,139,1,0,0,0,977,984,
		3,122,61,0,978,980,5,7,0,0,979,981,3,104,52,0,980,979,1,0,0,0,980,981,
		1,0,0,0,981,982,1,0,0,0,982,984,5,8,0,0,983,977,1,0,0,0,983,978,1,0,0,
		0,984,141,1,0,0,0,985,988,3,130,65,0,986,988,3,110,55,0,987,985,1,0,0,
		0,987,986,1,0,0,0,988,143,1,0,0,0,989,990,7,7,0,0,990,145,1,0,0,0,991,
		999,5,62,0,0,992,999,5,63,0,0,993,999,5,123,0,0,994,999,3,148,74,0,995,
		999,5,4,0,0,996,999,3,152,76,0,997,999,3,154,77,0,998,991,1,0,0,0,998,
		992,1,0,0,0,998,993,1,0,0,0,998,994,1,0,0,0,998,995,1,0,0,0,998,996,1,
		0,0,0,998,997,1,0,0,0,999,147,1,0,0,0,1000,1004,5,124,0,0,1001,1003,3,
		150,75,0,1002,1001,1,0,0,0,1003,1006,1,0,0,0,1004,1002,1,0,0,0,1004,1005,
		1,0,0,0,1005,1007,1,0,0,0,1006,1004,1,0,0,0,1007,1008,5,124,0,0,1008,149,
		1,0,0,0,1009,1015,5,131,0,0,1010,1011,5,130,0,0,1011,1012,3,130,65,0,1012,
		1013,5,10,0,0,1013,1015,1,0,0,0,1014,1009,1,0,0,0,1014,1010,1,0,0,0,1015,
		151,1,0,0,0,1016,1017,7,8,0,0,1017,153,1,0,0,0,1018,1019,7,9,0,0,1019,
		155,1,0,0,0,1020,1021,4,78,36,0,1021,1022,3,162,81,0,1022,1023,3,100,50,
		0,1023,157,1,0,0,0,1024,1025,4,79,37,0,1025,1026,3,162,81,0,1026,1027,
		3,100,50,0,1027,159,1,0,0,0,1028,1031,3,162,81,0,1029,1031,3,164,82,0,
		1030,1028,1,0,0,0,1030,1029,1,0,0,0,1031,161,1,0,0,0,1032,1033,7,10,0,
		0,1033,163,1,0,0,0,1034,1038,3,166,83,0,1035,1038,5,62,0,0,1036,1038,5,
		63,0,0,1037,1034,1,0,0,0,1037,1035,1,0,0,0,1037,1036,1,0,0,0,1038,165,
		1,0,0,0,1039,1088,5,73,0,0,1040,1088,5,74,0,0,1041,1088,5,75,0,0,1042,
		1088,5,76,0,0,1043,1088,5,77,0,0,1044,1088,5,78,0,0,1045,1088,5,79,0,0,
		1046,1088,5,80,0,0,1047,1088,5,81,0,0,1048,1088,5,82,0,0,1049,1088,5,83,
		0,0,1050,1088,5,84,0,0,1051,1088,5,85,0,0,1052,1088,5,86,0,0,1053,1088,
		5,87,0,0,1054,1088,5,88,0,0,1055,1088,5,89,0,0,1056,1088,5,90,0,0,1057,
		1088,5,91,0,0,1058,1088,5,92,0,0,1059,1088,5,93,0,0,1060,1088,5,94,0,0,
		1061,1088,5,95,0,0,1062,1088,5,96,0,0,1063,1088,5,97,0,0,1064,1088,5,98,
		0,0,1065,1088,5,104,0,0,1066,1088,5,105,0,0,1067,1088,5,106,0,0,1068,1088,
		5,107,0,0,1069,1088,5,108,0,0,1070,1088,5,109,0,0,1071,1088,5,110,0,0,
		1072,1088,5,113,0,0,1073,1088,3,168,84,0,1074,1088,5,116,0,0,1075,1088,
		5,117,0,0,1076,1088,5,118,0,0,1077,1088,5,119,0,0,1078,1088,5,120,0,0,
		1079,1088,5,121,0,0,1080,1088,5,102,0,0,1081,1088,5,103,0,0,1082,1088,
		5,111,0,0,1083,1088,5,112,0,0,1084,1088,5,100,0,0,1085,1088,5,99,0,0,1086,
		1088,5,101,0,0,1087,1039,1,0,0,0,1087,1040,1,0,0,0,1087,1041,1,0,0,0,1087,
		1042,1,0,0,0,1087,1043,1,0,0,0,1087,1044,1,0,0,0,1087,1045,1,0,0,0,1087,
		1046,1,0,0,0,1087,1047,1,0,0,0,1087,1048,1,0,0,0,1087,1049,1,0,0,0,1087,
		1050,1,0,0,0,1087,1051,1,0,0,0,1087,1052,1,0,0,0,1087,1053,1,0,0,0,1087,
		1054,1,0,0,0,1087,1055,1,0,0,0,1087,1056,1,0,0,0,1087,1057,1,0,0,0,1087,
		1058,1,0,0,0,1087,1059,1,0,0,0,1087,1060,1,0,0,0,1087,1061,1,0,0,0,1087,
		1062,1,0,0,0,1087,1063,1,0,0,0,1087,1064,1,0,0,0,1087,1065,1,0,0,0,1087,
		1066,1,0,0,0,1087,1067,1,0,0,0,1087,1068,1,0,0,0,1087,1069,1,0,0,0,1087,
		1070,1,0,0,0,1087,1071,1,0,0,0,1087,1072,1,0,0,0,1087,1073,1,0,0,0,1087,
		1074,1,0,0,0,1087,1075,1,0,0,0,1087,1076,1,0,0,0,1087,1077,1,0,0,0,1087,
		1078,1,0,0,0,1087,1079,1,0,0,0,1087,1080,1,0,0,0,1087,1081,1,0,0,0,1087,
		1082,1,0,0,0,1087,1083,1,0,0,0,1087,1084,1,0,0,0,1087,1085,1,0,0,0,1087,
		1086,1,0,0,0,1088,167,1,0,0,0,1089,1090,7,11,0,0,1090,169,1,0,0,0,1091,
		1096,5,12,0,0,1092,1096,5,0,0,1,1093,1096,4,85,38,0,1094,1096,4,85,39,
		0,1095,1091,1,0,0,0,1095,1092,1,0,0,0,1095,1093,1,0,0,0,1095,1094,1,0,
		0,0,1096,171,1,0,0,0,119,173,176,202,206,213,219,223,230,238,243,245,252,
		256,265,269,277,281,285,294,302,306,314,319,321,328,333,344,350,365,385,
		389,393,401,410,415,422,427,432,439,446,453,471,475,477,484,490,495,510,
		513,518,521,532,536,541,552,558,566,572,578,582,586,589,594,600,608,613,
		618,622,626,636,641,644,649,656,663,672,676,681,686,692,696,711,714,719,
		736,739,748,756,760,762,767,771,778,785,837,899,907,911,924,926,936,944,
		948,950,956,960,964,969,975,980,983,987,998,1004,1014,1030,1037,1087,1095
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
